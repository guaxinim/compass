<chapter id="gps-embeddedopenjpa">
	<title>Embedded OpenJPA</title>

	<sect1 id="embeddedopenjpa-introduction">
    	<title>Introduction</title>
		
		<para>
			Compass has "native" integration with <ulink url="http://openjpa.apache.org/">OpenJPA</ulink> by working in an "embedded" mode within it. OpenJPA can be used with <xref linkend="gps-jpa"/> and Compass has specific indexer and lifecycle for it, but Compass can also work from within OpenJPA and have OpenJPA control Compass creation and configuration.
		</para>
		
		<para>
	        Embedded Compass OpenJPA integration provides support for database indexing and mirroring through the use of the OpenJPA, an implementation of the EJB3 standard.
		</para>
		
		<para>
        	Compass OpenJPA integration utilizes Compass::Core OSEM feature (Object to Search Engine Mappings) and Jpa feature (Object to Relational Mappings) to provide simple database indexing. As well as OpenJPA support for life-cycle event based system to provide real time mirroring of data changes done through Jpa (see notes about real time mirroring later on). The path data travels through the system is:  Database -- Jpa (Entity Manager) -- Objects -- Compass::Gps -- Compass::Core (Search Engine).
      	</para>

      	<para>
        	The Compass OpenJPA uses under the cover <xref linkend="gps-jpa"/> and all configuration options apply when using it. The JPA Gps Device extends Compass Gps <classname>AbstractParallelGpsDevice</classname> and supports parallel index operations. It is discussed in more detail here: <xref linkend="gps-paralleldevice"/>.
      	</para>

	</sect1>

    <sect1 id="embeddedopenjpa-conifguration">
		<title>Configuration</title>

    	<para>
        	Configuration of Embedded Compass OpenJPA integration is done within the persistence xml file (or programmatic Map configuration) using Compass support for properties based configuration. Here is the most simplest example of enabling Compass within OpenJPA (note, just having Compass jars within the classpath enable it!):
      	</para>

      	<para>
<programlisting><![CDATA[<persistence xmlns="http://java.sun.com/xml/ns/persistence" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence persistence_1_0.xsd" version="1.0">
	
	<persistence-unit name="embeddedopenjpa" transaction-type="RESOURCE_LOCAL">
	    <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
	    <class>eg.Test</class>
	    <exclude-unlisted-classes>true</exclude-unlisted-classes>
	    <properties>
	        <property name="openjpa.jdbc.DBDictionary" value="hsql" />
	        <property name="openjpa.ConnectionDriverName" value="org.hsqldb.jdbcDriver" />
	        <property name="openjpa.ConnectionURL" value="jdbc:hsqldb:mem:test" />
	        <property name="openjpa.ConnectionUserName" value="sa" />
	        <property name="openjpa.ConnectionPassword" value="" />
	
			<!-- This will enable Comapss, this is also the single Compass configuration required -->
	        <property name="compass.engine.connection" value="target/test-index" />
	    </properties>
	</persistence-unit
</persistence>
]]></programlisting>
		</para>
      
    </sect1>

    <sect1 id="embeddedopenjpa-index">
    	<title>Index Operation</title>

      	<para>
      		Embedded Compass OpenJpa provides the ability to index a database (through the use of the JPA device). Indexing the database is simple and can be done using:
<programlisting><![CDATA[
	OpenJPAHelper.getCompassGps(entityManagerFactory).index();
]]></programlisting>
      	</para>

		<para>
			Specific configuration for the Compass index instance can be done using <literal>gps.index.compass.</literal> prefix. Internally the <classname>CompassGps</classname> implementation used is <classname>SingleCompassGps</classname>.
		</para>
		
		<para>
			Several special properties can also be used. The first, <literal>compass.openjpa.reindexOnStartup</literal> (defaults to <literal>false</literal>) will cause Compass to reindex the database when it starts up. Another important configuration option is <literal>compass.openjpa.indexQuery.[entity name/class]</literal> which allows to plug a custom query string for indexing.
		</para>

    </sect1>

    <sect1 id="embeddedopenjpa-datamirroring">
      	<title>Real Time Data Mirroring</title>

      	<para>
        	The embedded Compass OpenJPA integration will automatically register with OpenJPA for lifecycle events and mirror any operation performed using OpenJPA to the database. It also, automatically, integrates with OpenJPA transactions and commits/rollbacks a transaction when OpenJPA transaction commits/rollbacks.
      	</para>      
    </sect1>

	<sect1>
		<title>OpenJPA Helper</title>
		
		<para>
			<classname>OpenJPAHelper</classname> can be used to obtain the current open <literal>CompassSession</literal> and a <literal>Compass</literal> instance. Both can be obtained from an <literal>EntityManagerFactory</literal> or an <literal>EntityManager</literal>. Prime use case for obtaining a Compass session is to query the index. Note, when querying the index, the returned Objects are not "attached" to JPA, and loaded from the index. This is done for performance reasons as usually they will be used to display results to the user. Attaching them can be done simply by using JPA API.
		</para>
	</sect1>

</chapter>
