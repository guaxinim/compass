<chapter id="core-workingwithobjects">
  <title>Working with objects</title>

  <sect1 id="core-workingwithobjects-introduction">
    <title>Introduction</title>

    <para>
      Lets assume you have download and configured Compass within your application and create some RSEM/OSEM/XSEM mappings. This section provides the basics of how you will use Compass from within the application to load, search and delete Compass searchable objects. All operations within Compass are accessed through the <literal>CompassSession</literal> interface. The interface provides <literal>Object</literal> and <literal>Resource</literal> method API's, giving the developer the choice to work directly with Compass internal representation (<literal>Resource</literal>) or application domain Objects.
    </para>

    </sect1>

    <sect1 id="core-workingwithobjects-save">
      <title>Making Object/Resource Searchable</title>

      <para>
        Newly instantiated objects (or Resources) are saved to the index using the <literal>save(Object)</literal> method. If you have created more than one mapping (alias) to the same object (in OSEM file), use the <literal>save(String alias, Object)</literal> instead.

<programlisting><![CDATA[Author author = new Author();
author.setId(new Long(1));
author.setName("Jack London");
compassSession.save(author);
]]></programlisting>
      </para>
      
      <para>
        When using OSEM and defining cascading on component/reference mappings, Compass will cascade save operations to the target referenced objects (if they are marked with save cascade). Non root objects are allowed to be saved in Compass if they have cascading save relationship defined.
      </para>
    </sect1>

    <sect1 id="core-workingwithobjects-load">
      <title>Loading an Object/Resource</title>
      <para>
        The <literal>load()</literal> method allows you to load an object (or a Resource) if you already know it's identifier. If you have one mapping for the object (hence one alias), you can use the <literal> load(Class, Object id)</literal> method. If you created more than one mapping (alias) to the same object, use the <literal>load(String alias, Object id)</literal> method instead.

<programlisting><![CDATA[Author author = (Author) session.load(Author.class,
     new Long(12));
]]></programlisting>
      </para>

      <para>
        <literal>load()</literal> will throw an exception if no object exists in the index. If you are not sure that there is an object that maps to the supplied id, use the <literal>get</literal> method instead.
      </para>
    </sect1>

    <sect1 id="core-workingwithobjects-delete">
      <title>Deleting an Object/Resource</title>

      <para>
        If you wish to delete an object (or a Resource), you can use the <literal> delete()</literal> method on the <literal>CompassSession</literal> interface (note that only the identifiers need to be set on the corresponding object or Resource).

<programlisting><![CDATA[session.delete(Author.class, 12);
// or :
session.delete(Author.class, new Author(12));
// or :
session.delete(Author.class, "12"); // Everything in the search engine is a String at the end
]]></programlisting>
      </para>

      <para>
        When using OSEM and defining cascading on component/reference mappings, Compass will cascade delete operations to the target referenced objects (if they are marked with delete cascade). Non root objects are allowed to be deleted in Compass if they have cascading save relationship defined. Note, deleting objects by their id will not cause cascaded relationships to be deleted, only when the actual object is passed to be deleted, with the relationships initialized (the object can be loaded from the search engine).
      </para>

    </sect1>

    <sect1 id="Searching">
        <title>Searching</title>

        <para>
          For a quick way to query the index, use the <literal>find()</literal> method. The <literal>find()</literal> method returns a <literal>CompassHits</literal> object, which is an interface which encapsulates the search results. For more control over how the query will executed, use the <literal>CompassQuery</literal> interface, explained later in the section.
        </para>

        <para>
<programlisting><![CDATA[CompassHits hits = session.find("name:jack");]]>
</programlisting>
        </para>

      <sect2 id="Query String Syntax">
        <title>Query String Syntax</title>

        <para>
          The free text query string has a specific syntax. The syntax is the same one <ulink url="http://lucene.apache.org">Lucene</ulink> uses, and is summarized here:

          <table><tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row>
                <entry>Expression</entry><entry>Hits That</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>jack</entry>
                <entry>Contain the term <literal>jack</literal> in the default search field</entry>
              </row>
              <row>
                <entry>jack london (jack AND london)</entry>
                <entry>Contains the term <literal>jack</literal> and <literal>london</literal> in the default search field</entry>
              </row>
              <row>
                <entry>jack OR london</entry>
                <entry>Contains the term <literal>jack</literal> or <literal>london</literal>, or both, in the default search field</entry>
              </row>
              <row>
                <entry>+jack +london (jack AND london)</entry>
                <entry>Contains both <literal>jack</literal> and <literal>london</literal> in the default search field</entry>
              </row>
              <row>
                <entry>name:jack</entry>
                <entry>Contains the term <literal>jack</literal> in the <literal>name</literal> property (meta-data)</entry>
              </row>
              <row>
                <entry>name:jack -city:london (name:jack AND NOT city:london)</entry>
                <entry>Have <literal>jack</literal> in the <literal>name</literal> property and don't have <literal>london</literal> in the <literal>city</literal> property</entry>
              </row>
              <row>
                <entry>name:"jack london"</entry>
                <entry>Contains the exact phrase <literal>jack london</literal> in the <literal>name</literal> property</entry>
              </row>
              <row>
                <entry>name:"jack london"~5</entry>
                <entry>Contain the term <literal>jack</literal> and <literal>london</literal> within five positions of one another</entry>
              </row>
              <row>
                <entry>jack*</entry>
                <entry>Contain terms that begin with <literal>jack</literal></entry>
              </row>
              <row>
                <entry>jack~</entry>
                <entry>Contains terms that are close to the word <literal>jack</literal></entry>
              </row>
              <row>
                <entry>birthday:[1870/01/01 TO 1920/01/01]</entry>
                <entry>Have the <literal>birthday</literal> values between the specified values. Note that it is a lexicography range</entry>
              </row>
            </tbody>
          </tgroup></table>

        </para>

        <para>
          The default search can be controlled using the Compass::Core configuration parameters and defaults to <literal>all</literal> meta-data.
        </para>

      </sect2>
      
      <sect2 id="Range Queries Extensions">
        <title>Query String - Range Queries Extensions</title>
        
        <para>
          Compass simplifies the usage of range queries when working with dates and numbers. When using numbers it is preferred to store the number if a lexicography correct value (such as 00001, usually using the format attribute). When using range queries, Compass allows to execute the following query: value:[1 TO 3] and internally Compass will automatically translate it to value:[0001 TO 0003].
        </para>
        
        <para>
          When using dates, Compass allows to use several different formats for the same property. The format of the Date object should be sortable in order to perform range queries. This means, for example, that the format attribute should be: format="yyyy-MM-dd". This allows for range queries such as: date:[1980-01-01 TO 1985-01-01] to work. Compass also allows to use different formats for range queries. It can be configured within the format configuration: format="yyyy-MM-dd||dd-MM-yyyy" (the first format is the one used to store the String). And now the following range query can be executed: date:[01-01-1980 TO 01-01-1985].
        </para>
        
        <para>
          Compass also allows for math like date formats using the now keyword. For example: "now+1year" will translate to a date with a year from now. For more information please refer to the DateMathParser javadoc.
        </para>
      </sect2>

      <sect2 id="CompassHits">
        <title>CompassHits, CompassDetachedHits &amp; CompassHitsOperations</title>

        <para>
            All the search results are accessible using the <literal>CompassHits</literal> interface. It provides an efficient access to the search results and will only hit the index for "hit number N" when requested. Results are ordered by relevance (if no sorting is provided), in other words and by how well each resource matches the query.
        </para>

        <para>
          <literal>CompassHits</literal> can only be used within a transactional context, if hits are needed to be accessed outside of a transactional context (like in a jsp view page), they have to be "detached", using one of <literal>CompassHits#detch</literal> methods. The detached hits are of type <literal>COmpassDetachedHits</literal>, and it is guaranteed that the index will not be accessed by any operation of the detached hits. <literal>CompassHits</literal> and <literal>CompassDetachedHits</literal> both share the same operations interface called <literal>CompassHitsOperations</literal>.
        </para>

        <para>
          The following table lists the different <literal>CompassHitsOperations</literal> methods (note that there are many more, please view the javadoc):

          <table><tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row>
                <entry>Method</entry><entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>getLength()</literal> or <literal>length()</literal></entry>
                <entry>Number of resources in the hits.</entry>
              </row>
              <row>
                <entry><literal>score(n)</literal></entry>
                <entry>Normalized score (based on the score of the topmost resource) of the n'th top-scoring resource. Guaranteed to be greater than 0 and less than or equal to 1.</entry>
              </row>
              <row>
                <entry><literal>resource(n)</literal></entry>
                <entry>Resource instance of the n'th top-scoring resource.</entry>
              </row>
              <row>
                <entry><literal>data(n)</literal></entry>
                <entry>Object instance of the n'th top-scoring resource.</entry>
              </row>
            </tbody>
          </tgroup></table>

        </para>

      </sect2>

      <sect2 id="CompassQuery">
        <title>CompassQuery and CompassQueryBuilder</title>

        <para>
          Compass::Core comes with the <literal>CompassQueryBuilder</literal> interface, which provides programmatic API for building a query. The query builder creates a <literal>CompassQuery</literal> which can than be used to add sorting and executing the query.
        </para>

        <para>
          Using the <literal>CompassQueryBuilder</literal>, simple queries can be created (i.e. eq, between, prefix, fuzzy), and more complex query builders can be created as well (such as a boolean query, multi-phrase, and query string).
        </para>

        <para>
          The following code shows how to use a query string query builder and using the <literal>CompassQuery</literal> add sorting to the result.

<programlisting><![CDATA[CompassHits hits = session.createQueryBuilder()
  .queryString("+name:jack +familyName:london")
    .setAnalyzer("an1") // use a different analyzer
  .toQuery()
    .addSort("familyName", CompassQuery.SortPropertyType.STRING)
    .addSort("birthdate", CompassQuery.SortPropertyType.INT)
  .hits();
]]></programlisting>
        </para>

        <para>
          Another example for building a query that requires the name to be jack, and the familyName not to be london:

<programlisting><![CDATA[CompassQueryBuilder queryBuilder = session.createQueryBuilder();
CompassHits hits =  queryBuilder.bool()
    .addMust( queryBuilder.term("name", "jack") )
    .addMustNot( queryBuilder.term("familyName", "london") )
  .toQuery()
    .addSort("familyName", CompassQuery.SortPropertyType.STRING)
    .addSort("birthdate", CompassQuery.SortPropertyType.INT)
  .hits();
]]></programlisting>
        </para>
        
        <para>
            <literal>CompassQuery</literal> can also be created using the <literal>Compass</literal> instance, without the need to construct a <literal>CompassSession</literal>. They can then stored and used safely by multiple sessions (in a multi threaded environment) by attaching them to the current session using <literal>CompassQuery#attach(CompssSession)</literal> API.
        </para>

        <para>
          Note that sorted resource properties / meta-data must be stored and <literal>not_analyzed</literal>. Also sorting requires more memory to keep sorting properties available. For numeric types, each property sorted requires four bytes to be cached for each resource in the index. For <literal>String</literal> types, each unique term needs to be cached.
        </para>

        <para>
          When a query is built, most of the queries can accept an Object as a parameter, and the name part can be more than just a simple string value of the meta-data / resource-property. If we take the following mapping for example:

<programlisting><![CDATA[<class name="eg.A" alias="a">
  <id name="id" />

  <property name="familyName">
    <meta-data>family-name</meta-data>
  </property>

  <property name="date">
    <meta-data converter-param="YYYYMMDD">date-sem</meta-data>
  </property>

</class>
]]></programlisting>

        </para>

        <para>
          The mapping defines a simple class mapping, with a simple string property called familyName and a date property called date. With the <literal>CompassQueryBuilder</literal>, most of the queries can directly work with either level of the mappings. Here are some samples:

<programlisting><![CDATA[CompassQueryBuilder queryBuilder = session.createQueryBuilder();
// The following search will result in matching "london" against "familyName"
CompassHits hits =  queryBuilder.term("a.familyName.family-name", "london").hits();

// The following search will use the class property meta-data id, which in this case
// is the first one (family-name). If there was another meta-data with the family-name value,
// the internal meta-data that is created will be used ($/a/familyName).
CompassHits hits =  queryBuilder.term("a.familyName", "london").hits();

// Here, we provide the Date object as a parameter, the query builder will use the
// converter framework to convert the value (and use the given parameter)
CompassHits hits =  queryBuilder.term("a.date.date-sem", new Date()).hits();

// Remmember, that the alias constraint will not be added automatically, so
// the following query will cause only family-name with the value "london" of alias "a"
CompassHits hits =  queryBuilder.bool()
    .addMust( queryBuilder.alias("a") )
    .addMust( queryBuilder.term("a.familyName", "london") )
  .toQuery().hits();
]]></programlisting>

        </para>
        
        <para>
            When using query strings and query parsers, Compass enhances Lucene query parser to support custom formats (for dates and numbers, for example) as well as support dot path notation. The query: <literal>a.familyname.family-name:london</literal> will result in a query matching on <literal>familyName</literal> to <literal>london</literal> as well as wrapping the query with one that will only match the <literal>a</literal> alias.
        </para>

      </sect2>

	<sect2 id="core-workingwithobjects-terms">
		<title>Terms and Frequencies</title>
		
		<para>
			Compass allows to easily get all the terms (possible values) for a property / meta-data name and their respective frequencies. This can be used to build a frequency based list of terms showing how popular are different tags (as different blogging sites do for example). Here is a simple example of how it can be used:
		</para>
		
		<para>
<programlisting><![CDATA[CompassTermFreq[] termFreqs = session.termFreqsBuilder(new String[]{"tag"}).toTermFreqs();
// iterate over the term freqs and display them

// a more complex example:
termFreqs = session.termFreqsBuilder(new String[]{"tag"}).setSize(10).
	.setSort(CompassTermFreqsBuilder.Sort.TERM).normalize(0, 1).toTermFreqs();
]]></programlisting>
		</para>
	</sect2>
      
      <sect2 id="CompassSearchHelper">
        <title>CompassSearchHelper</title>
        
        <para>
          Compass provides a simple search helper providing support for pagination and automatic hits detach. The search helper can be used mainly to simplify search results display and can be easily integrated with different MVC frameworks. CompassSearchHelper is thread safe. Here is an example of how it can be used:

<programlisting><![CDATA[// constructs a new search helper with page size 10.
CompassSearchHelper searchHelper = new CompasssSearchHelper(compass, 10);
// ...
CompassSearchResults results = searchHelper.search(new CompassSearchCommand("test", new Integer(0)));
for (int i = 0; i < results.getHits().length; i++) {
  CompassHit hit = results.getHits()[i];
  // display the results
}
// iterate through the search results pages
for (int i = 0; i < results.getPages().length; i++) {
  Page page = results.getPages()[i];
  // display a page, for example 1-10, 11-20, 21-30
}
]]></programlisting>
        </para>
        
      </sect2>

      <sect2 id="CompassHighlighter">
        <title>CompassHighlighter</title>

        <para>
          Compass::Core comes with the <literal>CompassHighlighter</literal> interface. It provides ways to highlight matched text fragments based on a query executed. The following code fragment shows a simple usage of the highlighter functionality (please consult the javadoc for more information):

<programlisting><![CDATA[CompassHits hits =  session.find("london");
// a fragment highlighted for the first hit, and the description property name
String fragment = hits.highlighter(0).fragment("description");
]]></programlisting>
        </para>
        
        <para>
           Highlighting can only be used with <literal>CompassHits</literal>, which operations can only be used within a transactional context. When working with pure hits results, <literal>CompassHits</literal> can be detached, and then used outside of a transactional context, the question is: what can be done with highlighting?
        </para>
        
        <para>
           Each highlighting operation (as seen in the previous code) is also cached within the hits object. When detaching the hits, the cache is passed to the detached hits, which can then be used outside of a transaction. Here is an example:
<programlisting><![CDATA[CompassHits hits =  session.find("london");
for (int i = 0.; i < 10; i++) {
    hits.highlighter(i).fragment("description"); // this will cache the highlighted fragment
}
CompassHit[] detachedHits = hits.detach(0, 10).getHits();

// outside of a transaction (maybe in a view technology)
for (int i = 0; i < detachedHits.length; i++) {
    // this will return the first fragment
    detachedHits[i].getHighlightedText().getHighlightedText();
    // this will return the description fragment, note that the implementation
    // implements the Map interface, which allows it to be used simply in JSTL env and others
    detachedHits[i].getHighlightedText().getHighlightedText("description"); 
}
]]></programlisting>
        </para>

      </sect2>

    </sect1>


</chapter>

