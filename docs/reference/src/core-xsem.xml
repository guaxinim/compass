<chapter id="core-xsem">
    <title>XSEM - Xml to Search Engine Mapping</title>

    <sect1 id="xsem-introduction">
      <title>Introduction</title>

      <para>
        Compass provides the ability to map XML structure to the underlying Search Engine through simple XML mapping files, we call this technology XSEM (XML to Search Engine Mapping). XSEM provides a rich syntax for describing XML mappings using Xpath expressions. The XSEM files are used by Compass to extract the required xml elements from the xml structure at run-time and inserting the required meta-data into the Search Engine index.
      </para>

   </sect1>

   <sect1 id="xsem-xmlobject-def">
      <title>Xml Object</title>

      <para>
         At the core of XSEM supports is <literal>XmlObject</literal> abstraction on top of the actual XML library implementation. The <literal>XmlObject</literal> represents an XML element (document, node, attribute, ...) which is usually the result of an Xpath expression. It allows to get the name and value of the given element, and execute Xpath expressions against it (for more information please see the <literal>XmlObject</literal> javadoc).
      </para>

      <para>
         Here is an example of how <literal>XmlObject</literal> is used with Compass:
<programlisting><![CDATA[CompassSession session = compass.openSession();
// ...
XmlObject xmlObject = // create the actual XmlObject implementation (we will see how soon)
session.save("alias", xmlObject);
]]></programlisting>
      </para>

      <para>
         An extension to the <literal>XmlObject</literal> interface is the <literal>AliasedXmlObject</literal> interface. It represents an xml object that is also associated with an alias. This means that saving the object does not require to explicitly specify the alias that it will be saved under.
<programlisting><![CDATA[CompassSession session = compass.openSession();
// ...
AliasedXmlObject xmlObject = // create the actual XmlObject implementation (we will see how soon)
session.save(xmlObject);
]]></programlisting>
      </para>

      <para>
         Compass comes with support for dom4j and JSE 5 xml libraries, here is an example of how to use dom4j API in order to create a dom4j xml object:
<programlisting><![CDATA[CompassSession session = compass.openSession();
// ...
SAXReader saxReader = new SAXReader();
Document doc = saxReader.read(new StringReader(xml));
AliasedXmlObject xmlObject = new Dom4jAliasedXmlObject(alias, doc.getRootElement());
session.save(xmlObject);
]]></programlisting>
      </para>
      <para>
         And here is a simple example of how to use JSE 5:
<programlisting><![CDATA[CompassSession session = compass.openSession();
// ...
Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(xml)));
AliasedXmlObject xmlObject = NodeAliasedXmlObject(alias, doc);
session.save(xmlObject);
]]></programlisting>
      </para>

    </sect1>

    <sect1 id="xsem-xmlcontent-def">
       <title>Xml Content Handling</title>

       <para>
          Up until now, Compass has no knowledge of how to parse and create an actual <literal>XmlObject</literal> implementation, or how to convert an <literal>XmlObject</literal> into its xml representation. This is perfectly fine, but it also means that systems will not be able to work with <literal>XmlObject</literal> for read/search operations. Again, this is perfectly ok for some application, since they can always work with the underlying <literal>Resource</literal> representation, but some applications would still like to store the actual xml content in the search engine, and work with the <literal>XmlObject</literal> for read/search operations.
       </para>

       <para>
          Compass XSEM support allows to define the <literal>xml-content</literal> mapping (defined below), which will cause Compass to store the xml representation in the search engine as well. It will also mean that for read/search operations, the application will be able to get an <literal>XmlObject</literal> back (for example, using <literal>CompassSession#get</literal> operation).
       </para>

       <para>
          In order to support this, Compass must be configured with how to parse the xml content into an <literal>XmlObject</literal>, and how to convert an <literal>XmlObject</literal> into an xml string. Compass comes with built in converters that do exactly that:

          <table>
            <title>Compass XmlContentConverters</title>
            <tgroup cols="3">
              <colspec colname="c1" colwidth="3*" />
              <colspec colname="c2" colwidth="3*" />
              <colspec colname="c3" colwidth="4*" />
              <thead>
                <row><entry>XmlContentConverter</entry><entry>Name</entry><entry>Description</entry></row>
              </thead>
              <tbody>
                <row>
                  <entry>org.compass.core.xml.javax.converter. NodeXmlContentConverter</entry>
                  <entry>javax-node</entry>
                  <entry>Support for JSE 5 xml libraries. Not recommended on account of performance.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.javax.converter. StaxNodeXmlContentConverter</entry>
                  <entry>javax-stax</entry>
                  <entry>Support for JSE 5 xml libraries. Parses the Document model using StAX. Not recommended on account of performance.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.dom4j.converter. SAXReaderXmlContentConverter</entry>
                  <entry>dom4j-sax</entry>
                  <entry>Support dom4j <literal>SAXReader</literal> for parsing, and <literal>XMLWriter</literal> to write the raw xml data.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.dom4j.converter. XPPReaderXmlContentConverter</entry>
                  <entry>dom4j-xpp</entry>
                  <entry>Support dom4j <literal>XPPReader</literal> for parsing, and <literal>XMLWriter</literal> to write the raw xml data.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.dom4j.converter. XPP3ReaderXmlContentConverter</entry>
                  <entry>dom4j-xpp3</entry>
                  <entry>Support dom4j <literal>XPP3Reader</literal> for parsing, and <literal>XMLWriter</literal> to write the raw xml data.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.dom4j.converter. STAXReaderXmlContentConverter</entry>
                  <entry>dom4j-stax</entry>
                  <entry>Support dom4j <literal>STAXEventReader</literal> for parsing, and <literal>XMLWriter</literal> to write the raw xml data.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.jdom.converter. SAXBuilderXmlContentConverter</entry>
                  <entry>jdom-sax</entry>
                  <entry>Support JDOM <literal>SAXBuilder</literal> for parsing, and <literal>XMLOutputter</literal> to write the raw xml data.</entry>
                </row>
                <row>
                  <entry>org.compass.core.xml.jdom.converter. STAXBuilderXmlContentConverter</entry>
                  <entry>jdom-stax</entry>
                  <entry>Support JDOM <literal>STAXBuilder</literal> for parsing, and <literal>XMLOutputter</literal> to write the raw xml data.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

       </para>

       <para>
          Most of the time, better performance can be achieved by pooling <literal>XmlContentConverter</literal>s implementations. Compass handling of <literal>XmlContentConverter</literal> allows for three different instantiation models: prototype, pool, and singleton. prototype will create a new <literal>XmlContentConverter</literal> each time, a singleton will use a shared <literal>XmlContentConverter</literal> for all operations, and pooled will pool <literal>XmlContentConverter</literal> instances. The default is prototype.
       </para>

       <para>
          Here is an example of a Compass schema based configuration that registers a global Xml Content converter:
<programlisting><![CDATA[<compass-core-config ...
   <compass name="default">

       <connection>
           <file path="target/test-index" />
       </connection>
       
       <settings>
           <setting name="compass.xsem.contentConverter.type" value="jdom-stax" />
           <setting name="compass.xsem.contentConverter.wrapper" value="pool" />
       </settings>

   </compass>
</compass-core-config>
]]></programlisting>
       </para>
       <para>
          And here is an example of properties based configuration:
<programlisting><![CDATA[compass.xsem.contentConverter.type=jdom-stax
compass.xsem.contentConverter.wrapper=pool    
]]></programlisting>
       </para>
       <para>
          And last, here is how it can be configured it programmatically:
<programlisting><![CDATA[settings.setSetting(CompassEnvironment.Xsem.XmlContent.TYPE, CompassEnvironment.Xsem.XmlContent.Jdom.TYPE_STAX);
]]></programlisting>
       </para>

       <para>
          Note, that specific converters can be associated with a specific <literal>xml-object</literal> mapping, in order to do it, simply register the converter under a different name (compass.converter.xmlContentMapping is the default name that Compass will use when nothing is configured), and use that name in the converter attribute of the <literal>xml-content</literal> mapping.
       </para>
       
       <para>
         Based on internal performance testing, the preferable configuration is a pooled converter that uses either dom4j or JDOM with a pull parser (StAX or XPP).
       </para>
    </sect1>

    <sect1 id="xsem-rawxmlobject-def">
       <title>Raw Xml Object</title>

       <para>
          If Compass is configured with an Xml Content converter, it now knows how to parse an xml content into an <literal>XmlObject</literal>. This allows us to simplify more the creation of <literal>XmlObject</literal>s from a raw xml data. Compass comes with a wrapper <literal>XmlObject</literal> implementation, which handles raw xml data (non parsed one). Here is how it can be used:
<programlisting><![CDATA[Reader xmlData = // construct an xml reader over raw xml content
AliasedXmlObject xmlObject = RawAliasedXmlObject(alias, xmlData);
session.save(xmlObject);
]]></programlisting>
       </para>
       <para>
          Here, Compass will identify that it is a <literal>RawAliasedXmlObject</literal>, and will used the registered converter (or the one configured against the <literal>xml-content</literal> mapping for the given alias) to convert it to the appropriate <literal>XmlObject</literal> implementation. Note, that when performing any read/search operation, the actual <literal>XmlObject</literal> that will be returned is the onc the the registered converter creates, and not the raw xml object.
       </para>
    </sect1>

    <sect1 id="xsem-mappingdefinition">
       <title>Mapping Definition</title>

       <para>
          XML/Search Engine mappings are defined in an XML document, and maps XML data structures. The mappings are xml centric, meaning that mappings are constructed around XML data structures themselves and not internal <literal>Resources</literal>. If we take the following as a sample XML data structure:
<programlisting><![CDATA[<xml-fragment>
     <data>
         <id value="1"/>
         <data1 value="data11attr">data11</data1>
         <data1 value="data12attr">data12</data1>
     </data>
     <data>
         <id value="2"/>
         <data1 value="data21attr">data21</data1>
         <data1 value="data22attr">data22</data1>
     </data>
</xml-fragment>
]]></programlisting>
       </para>
       <para>
          We can map it using the following XSEM xml mapping definition file:
<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE compass-core-mapping PUBLIC
      "-//Compass/Compass Core Mapping DTD 2.2//EN"
      "http://www.compass-project.org/dtd/compass-core-mapping-2.2.dtd">

<compass-core-mapping>

  <xml-object alias="data1" xpath="/xml-fragment/data[1]">
      <xml-id name="id" xpath="id/@value" />
      <xml-property xpath="data1/@value" />
      <xml-property name="eleText" xpath="data1" />
  </xml-object>

  <xml-object alias="data2" xpath="/xml-fragment/data">
      <xml-id name="id" xpath="id/@value" />
      <xml-property xpath="data1/@value" />
      <xml-property name="eleText" xpath="data1" />
  </xml-object>

  <xml-object alias="data3" xpath="/xml-fragment/data">
      <xml-id name="id" xpath="id/@value" />
      <xml-property xpath="data1/@value" />
      <xml-property name="eleText" xpath="data1" />
      <xml-content name="content" />
  </xml-object>

</compass-core-mapping>
]]></programlisting>
       </para>
        <para>
           Or using the following JSON based mapping configuration:
<programlisting><![CDATA[{
  "compass-core-mapping" : {
    xml : [
      {
        alias : "data1",
        xpath : "/xml-fragment/data[1]",
        id : { name : "id", xpath : "id/@value" }.
        property : [
          { xpath : "data1/@value" },
          { name : "eleText", xpath : "data1" }
        ]
      },
      {
        alias : "data2",
        xpath : "/xml-fragment/data",
        id : { name : "id", xpath : "id/@value" },
        property : [
          { xpath : "data1/@value" },
          { name : "eleText", xpath : "data1" }
        ]
      },
      {
        alias : "data3",
        xpath : "/xml-fragment/data",
        id : { name : "id", xpath : "id/@value" }.
        property : [
          { xpath : "data1/@value" },
          { name : "eleText", xpath : "data1" }
        ],
        content : { name : "content" }
      }
    ]
  }   
}
]]></programlisting>
        </para>
        <para>
            Or last, we can use programmatic builder API to construct the mapping:
<programlisting><![CDATA[
import static org.compass.core.mapping.xsem.builder.XSEM.*;

conf.addMapping(
    xml("data1").xpath("/xml-fragment/data[1]")
        .add(id("id/@value").indexName("id"))
        .add(property("data1/@value"))
        .add(proeprty("data1").indexName("eleText"))
);

conf.addMapping(
    xml("data2").xpath("/xml-fragment/data")
        .add(id("id/@value").indexName("id"))
        .add(property("data1/@value"))
        .add(proeprty("data1").indexName("eleText"))
);

conf.addMapping(
    xml("data3").xpath("/xml-fragment/data")
        .add(id("id/@value").indexName("id"))
        .add(property("data1/@value"))
        .add(proeprty("data1").indexName("eleText"))
        .add(content("content"))
);
]]></programlisting>
        </para>

       <para>
          The mapping definition here shows three different mappings (that will work with the sample xml). The different mappings are registered under different aliases, where the alias acts as the connection between the actual XML saved and the mappings definition.
       </para>
       
       <para>
         The xml mapping also supports xpath with namespaces easily. For example, if we have the following xml fragment:
<programlisting><![CDATA[<xml-fragment>
    <data xmlns="http://mynamespace.org">
        <id value="1"/>
        <data1 value="data11attr">data11</data1>
        <data1 value="data12attr">data12</data1>
    </data>
</xml-fragment>
]]></programlisting>
         We can define the following mapping:
<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE compass-core-mapping PUBLIC
     "-//Compass/Compass Core Mapping DTD 2.2//EN"
     "http://www.compass-project.org/dtd/compass-core-mapping-2.2.dtd">

<compass-core-mapping>

 <xml-object alias="data1" xpath="/xml-fragment/mynamespace:data">
     <xml-id name="id" xpath="mynamespace:id/@value" />
 </xml-object>
</compass-core-mapping>
]]></programlisting>
         In this case, we need to define the mapping between the <literal>mynamespace</literal> prefix used in the xpath definition and the <literal>http://mynamespace.org</literal> URI. Within the Compass configuration, a simple setting should be set: <literal>compass.xsem.namespace.mynamespace.uri=http://mynamespace.org</literal>. Other namespaces can be added using similar settings: <literal>compass.xsem.namespace.[prefix].uri=[uri]</literal>.
       </para>

       <para>
          An <literal>xml-object</literal> mapping can have an associated xpath expression with it, which will narrow down the actual xml elements that will represent the top level xml object which will be mapped to the search engine. A nice benefit here, is that the xpath can return multiple xml objects, which in turn will result in multiple <literal>Resources</literal> saved to the search engine.
       </para>

       <para>
          Each xml object mapping must have at least one <literal>xml-id</literal> mapping definition associated with it. It is used in order to update/delete existing xml objects.
       </para>

       <para>
          In the mapping definition associated with data3 alias, the <literal>xml-content</literal> mapping is used, which stores the actual xml content in the search engine as well. This will allow to unmarshall the xml back into an <literal>XmlObject</literal> representation. For the first two mappings (data1 and data2), search/read operations will only be able to work on the <literal>Resource</literal> level.
       </para>
       
       <sect2 id="xsem-converters">
         <title>Converters</title>
         
         <para>
           Actual value mappings (the <literal>xml-property</literal>) can use the extensive converters that come built in with Compass. Xml "value converter" are a special case since in their case, normalization needs to be done by converting a String to a normalized String. For example, a number with a certain format may need to be normalized into a number with a different (padded for example) format.
         </para>
         
         <para>
           For example, lets use the following xml:
<programlisting><![CDATA[<xml-fragment>
   <data>
       <id value="1"/>
       <data1 value="21.2">03-12-2001</data1>
   </data>
</xml-fragment>
]]></programlisting>
           We can define the following mapping:
<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE compass-core-mapping PUBLIC
    "-//Compass/Compass Core Mapping DTD 2.2//EN"
    "http://www.compass-project.org/dtd/compass-core-mapping-2.2.dtd">

<compass-core-mapping>

  <xml-object alias="data6" xpath="/xml-fragment/data">
      <xml-id name="id" xpath="id/@value" />
      <xml-property xpath="data1/@value" format="000000.00" value-converter="float" />
      <xml-property name="eleText" xpath="data1" format="yyyy-MM-dd||dd-MM-yyyy" value-converter="date" />
      <xml-content name="content" />
  </xml-object>
</compass-core-mapping>
]]></programlisting>
           In this case, we create a mapping under alias name <literal>data6</literal>. We can see the the <literal>value</literal> attribute of <literal>data1</literal> element is a float number. When we index it, we would like to convert it to the following format: <literal>000000.00</literal>. We can see, within the mappings, that we defined the converter to be of a <literal>float</literal> type and with the requested format. The actual <literal>data1</literal> element text is of type date, and again we configure the converter to be of type date, and we use the support for "format" based converters in Compass to accept several formats (the first is the one used when converting from an Object). So, in the date case, the converter will try and convert the <literal>03-12-2001</literal> date and will succeed thanks to the fact that the second date format match it. It will then convert the Date created back to a String using the first format, giving us a searchable date format indexed.
          </para>
       </sect2>
       
       <sect2 id="xsem-xmlobject">
          <title>xml-object</title>

          <para>
             You may declare a xml object mapping using the <literal>xml-object</literal> element:

 <programlisting><![CDATA[<xml-object
       alias="aliasName"
       sub-index="sub index name"
       xpath="optional xpath expression"
       analyzer="name of the analyzer"
 />
     all?,
     sub-index-hash?,
     xml-id*,
     (xml-analyzer?),
     (xml-boost?),
     (xml-property)*,
     (xml-content?)
 ]]></programlisting>

              <table>
                 <title>xml-object mapping</title>
                <tgroup cols="2">
                  <colspec colname="c1" colwidth="3*" />
                  <colspec colname="c2" colwidth="5*" />
                  <thead>
                    <row>
                      <entry>Attribute</entry><entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>alias</entry>
                      <entry>The name of the alias that represents the <literal>XmlObject</literal>.</entry>
                    </row>
                    <row>
                      <entry>sub-index (optional, defaults to the <literal>alias</literal> value)</entry>
                      <entry>The name of the sub-index that the alias will map to.</entry>
                    </row>
                    <row>
                      <entry>xpath (optional, will not execute an xpath expression if not specified)</entry>
                      <entry>An optional xpath expression to narrow down the actual xml elements that will represent the top level xml object which will be mapped to the search engine. A nice benefit here, is that the xpath can return multiple xml objects, which in turn will result in multiple <literal>Resources</literal> saved to the search engine.</entry>
                    </row>
                    <row>
                      <entry>analyzer (optional, defaults to the <literal>default</literal> analyzer)</entry>
                      <entry>The name of the analyzer that will be used to analyze <literal>ANALYZED</literal> properties. Defaults to the <literal>default</literal> analyzer which is one of the internal analyzers that comes with Compass. Note, that when using the <literal>xml-analyzer</literal> mapping (a child mapping of xml object mapping) (for an xml element that controls the analyzer), the analyzer attribute will have no effects.</entry>
                    </row>
                  </tbody>
                </tgroup>
            </table>
         </para>
      </sect2>

      <sect2 id="xsem-xmlid">
         <title>xml-id</title>

         <para>
            Mapped <literal>XmlObject's</literal> must declare at least one <literal>xml-id</literal>. The <literal>xml-id</literal> element defines the <literal>XmlObject</literal> (element, attribute, ...) that identifies the root <literal>XmlObject</literal> for the specified alias.

<programlisting><![CDATA[<xml-id
      name="the name of the xml id"
      xpath="xpath expression"
      value-converter="value converter lookup name"
      converter="converter lookup name"
/>
]]></programlisting>

              <table>
                 <title>xml-id mapping</title>
                <tgroup cols="2">
                  <colspec colname="c1" colwidth="3*" />
                  <colspec colname="c2" colwidth="5*" />
                  <thead>
                    <row>
                      <entry>Attribute</entry><entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                   <row>
                      <entry>name</entry>
                      <entry>The name of the <literal>xml-id</literal>. Will be used when constructing the xml-id internal path.</entry>
                   </row>
                   <row>
                      <entry>xpath</entry>
                      <entry>The xpath expression used to identify the xml-id. Must return a single xml element.</entry>
                   </row>
                   <row>
                     <entry>value-converter (optional, default to Compass <literal>SimpleXmlValueConverter</literal>)</entry>
                     <entry>The global converter lookup name registered with the configuration. This is a converter associated with converting the actual value of the xml-id. Acts as a convenient extension point for custom value converter implementation (for example, date formatters). <literal>SimpleXmlValueConverter</literal> will usually act as a base class for such extensions.</entry>
                   </row>
                   <row>
                     <entry>converter (optional)</entry>
                     <entry>The global converter lookup name registered with the configuration. The converter will is responsible to convert the xml-id mapping.</entry>
                   </row>
                  </tbody>
               </tgroup>
              </table>
         </para>
         <para>
            An important note regarding the <literal>xml-id</literal> mapping, is that it will always at as an internal Compass <literal>Property</literal>. This means that if one wish to have it as part of the searchable content, it will have to be mapped with <literal>xml-property</literal> as well.
         </para>
      </sect2>

      <sect2 id="xsem-xmlproperty">
         <title>xml-property</title>

         <para>
            Declaring and using the <literal>xml-property</literal> element.

<programlisting><![CDATA[<xml-property
      xpath="xpath expression"
      name="optionally the name of the xml property"
      store="yes|no|compress"
      index="analyzed|not_analyzed|no"
      boost="boost value for the property"
      analyzer="name of the analyzer"
      reverse="no|reader|string"
      override="true|false"
      exclude-from-all="no|yes|no_analyzed"
      value-converter="value converter lookup name"
      format="a format string for value converters that support this"
      converter="converter lookup name"
/>
]]></programlisting>

              <table>
                 <title>xml-property mapping</title>
                <tgroup cols="2">
                  <colspec colname="c1" colwidth="3*" />
                  <colspec colname="c2" colwidth="5*" />
                  <thead>
                    <row>
                      <entry>Attribute</entry><entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                   <row>
                      <entry>name (optional, will use the xml object (element, attribute, ...) name if not set)</entry>
                      <entry>The name that the value will be saved under. It is optional, and if not set, will use the xml object name (the result of the xpath expression).</entry>
                   </row>
                   <row>
                      <entry>xpath</entry>
                      <entry>The xpath expression used to identify the xml-property. Can return no xml objects, one xml object, or many xml objects.</entry>
                   </row>
                   <row>
                     <entry>store (optional, defaults to <literal>yes</literal>)</entry>
                     <entry>If the value of the xml property is going to be stored in the index.</entry>
                   </row>
                   <row>
                     <entry>index (optional, defaults to <literal>analyzed</literal>)</entry>
                     <entry>If the value of the xml property is going to be indexed (searchable). If it does, than controls if the value is going to be broken down and analyzed (<literal>analyzed</literal>), or is going to be used as is (<literal>not_analyzed</literal>).</entry>
                   </row>
                   <row>
                     <entry>boost (optional, defaults to <literal>1.0f</literal>)</entry>
                     <entry>Controls the boost level for the xml property.</entry>
                   </row>
                   <row>
                     <entry>analyzer (optional, defaults to the xml mapping analyzer decision scheme)</entry>
                     <entry>The name of the analyzer that will be used to analyze <literal>ANALYZED</literal> xml property mappings defined for the given property. Defaults to the xml mapping analyzer decision scheme based on the analyzer set, or the <literal>xml-analyzer</literal> mapping.</entry>.
                   </row>
                   <row>
                     <entry>exclude-from-all (optional, default to <literal>no</literal>)</entry>
                     <entry>Excludes the property from participating in the "all" meta-data. If set to <literal>no_analyzed</literal>, <literal>not_analyzed</literal> properties will be analyzed when added to the all property (the analyzer can be controlled using the analyzer attribute).</entry>
                   </row>
                   <row>
                     <entry>override (optional, defaults to <literal>true</literal>)</entry>
                     <entry>If there is another definition with the same mapping name, if it will be overridden or added as additional mapping. Mainly used to override definitions made in extended mappings.</entry>
                   </row>
                   <row>
                     <entry>reverse (optional, defaults to <literal>no</literal>)</entry>
                     <entry>The meta-data will have it's value reversed. Can have the values of <literal>no</literal> - no reverse will happen, <literal>string</literal> - the reverse will happen and the value stored will be a reversed string, and <literal>reader</literal> - a special reader will wrap the string and reverse it. The <literal>reader</literal> option is more performant, but the <literal>store</literal> and <literal>index</literal> settings will be discarded.</entry>
                   </row>
                   <row>
                     <entry>value-converter (optional, default to Compass <literal>SimpleXmlValueConverter</literal>)</entry>
                     <entry>The global converter lookup name registered with the configuration. This is a converter associated with converting the actual value of the xml-id. Acts as a convenient extension point for custom value converter implementation (for example, date formatters). <literal>SimpleXmlValueConverter</literal> will usually act as a base class for such extensions.</entry>
                   </row>
                   <row>
                     <entry>converter (optional)</entry>
                     <entry>The global converter lookup name registered with the configuration. The converter will is responsible to convert the xml-property mapping.</entry>
                   </row>
                  </tbody>
               </tgroup>
              </table>
         </para>
      </sect2>

     <sect2 id="xml-analyzer">
       <title>xml-analyzer</title>

       <para>
         Declaring an analyzer controller property using the <literal>xml-analyzer</literal> element.

 <programlisting><![CDATA[<xml-analyzer
       name="property name"
       xpath="xpath expression"
       null-analyzer="analyzer name if value is null"
       converter="converter lookup name"
 >
 </xml-analyzer>]]></programlisting>

         <table>
            <title>xml-analyzer mapping</title>
           <tgroup cols="2">
             <colspec colname="c1" colwidth="3*" />
             <colspec colname="c2" colwidth="5*" />
             <thead>
               <row><entry>Attribute</entry><entry>Description</entry></row>
             </thead>
             <tbody>
               <row>
                 <entry>name</entry>
                 <entry>The name of the xml-analyzer (results in a <literal>Property</literal>).</entry>
               </row>
               <row>
                 <entry>xpath</entry>
                 <entry>The xpath expression used to identify the xml-analyzer. Must return a single xml element.</entry>
               </row>
               <row>
                 <entry>null-analyzer (optional, defaults to error in case of a <literal>null</literal> value)</entry>
                 <entry>The name of the analyzer that will be used if the property has a <literal>null</literal> value, or the xpath expression returned no elements.</entry>
               </row>
               <row>
                   <entry>converter (optional)</entry>
                   <entry>The global converter lookup name registered with the configuration.</entry>
               </row>
             </tbody>
           </tgroup>
         </table>

         <para>
           The analyzer xml property mapping, controls the analyzer that will be used when indexing the <literal>XmlObject</literal>. If the mapping is defined, it will override the xml object mapping analyzer attribute setting.
         </para>

         <para>
           If, for example, Compass is configured to have two additional analyzers, called <literal>an1</literal> (and have settings in the form of <literal>compass.engine.analyzer.an1.*</literal>), and another called <literal>an2</literal>. The values that the xml property can hold are: <literal>default</literal> (which is an internal Compass analyzer, that can be configured as well), <literal>an1</literal> and <literal>an2</literal>. If the analyzer will have a <literal>null</literal> value, and it is applicable with the application, a <literal>null-analyzer</literal> can be configured that will be used in that case. If the resource property has a value, but there is not matching analyzer, an exception will be thrown.
         </para>

       </para>

     </sect2>

     <sect2 id="xml-boost">
       <title>xml-boost</title>

       <para>
         Declaring a dynamic boost mapping controlling the boost level using the <literal>xml-boost</literal> element.

<programlisting><![CDATA[<xml-analyzer
name="property name"
xpath="xpath expression"
default="the boost default value when no property value is present"
converter="converter lookup name"
>
</xml-analyzer>]]></programlisting>

         <table>
            <title>xml-analyzer mapping</title>
           <tgroup cols="2">
             <colspec colname="c1" colwidth="3*" />
             <colspec colname="c2" colwidth="5*" />
             <thead>
               <row><entry>Attribute</entry><entry>Description</entry></row>
             </thead>
             <tbody>
               <row>
                 <entry>name</entry>
                 <entry>The name of the xml-analyzer (results in a <literal>Property</literal>).</entry>
               </row>
               <row>
                 <entry>xpath</entry>
                 <entry>The xpath expression used to identify the xml-analyzer. Must return a single xml element.</entry>
               </row>
               <row>
                 <entry>default (optional, defaults to <literal>1.0</literal>)</entry>
                 <entry>The default boost value if no value is found.</entry>
               </row>
               <row>
                   <entry>converter (optional)</entry>
                   <entry>The global converter lookup name registered with the configuration.</entry>
               </row>
             </tbody>
           </tgroup>
         </table>

         <para>
             The boost xml property mapping, controls the boost associated with the Resource created based on the mapped property. The value of the property should be allowed to be converted to float.
         </para>

       </para>

     </sect2>

     <sect2 id="xml-content">
       <title>xml-content</title>

       <para>
         Declaring an xml content mapping using the <literal>xml-content</literal> element.

 <programlisting><![CDATA[<xml-content
       name="property name"
       store="yes|compress"
       converter="converter lookup name"
 >
 </xml-content>]]></programlisting>

         <table>
            <title>xml-content mapping</title>
           <tgroup cols="2">
             <colspec colname="c1" colwidth="3*" />
             <colspec colname="c2" colwidth="5*" />
             <thead>
               <row><entry>Attribute</entry><entry>Description</entry></row>
             </thead>
             <tbody>
               <row>
                 <entry>name</entry>
                 <entry>The name the xml content will be saved under.</entry>
               </row>
               <row>
                 <entry>store (optional, defaults to yes)</entry>
                 <entry>How to store the actual xml content.</entry>
               </row>
               <row>
                   <entry>converter (optional)</entry>
                   <entry>The global converter lookup name registered with the configuration.</entry>
               </row>
             </tbody>
           </tgroup>
         </table>
       </para>

       <para>
           The <literal>xml-content</literal> mapping causes Compass to store the actual xml content in the search engine as well. This will allow to unmarshall the xml back into an <literal>XmlObject</literal> representation. For <literal>xml-object</literal> mapping without an <literal>xml-content</literal> mapping, search/read operations will only be able to work on the <literal>Resource</literal> level.
       </para>

     </sect2>

    </sect1>
</chapter>
