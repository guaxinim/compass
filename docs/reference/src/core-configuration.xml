<chapter id="core-configuration">
  <title>Configuration</title>

  <sidebar>
    <title>Configuration Samples</title>
    <para>
      Throughout this manual, we will use the schema based configuration file to show examples of how to configure certain features. This does not mean that they can not be expressed in a settings based configuration (either programmatic or DTD based configuration file). For a complete list of all the different settings in compass, please refer to <xref linkend="core-settings"/>.
    </para>
  </sidebar>

  <para>
    Compass must be configured to work with a specific applications domain model. There are a large number of configuration parameters available (with default settings), which controls how Compass works internally and with the underlying Search Engine. This section describes the configuration API.
  </para>

  <para>
    In order to create a <classname>Compass</classname> instance, it first must be configured. <classname>CompassConfiguration</classname> can be used in order to configure a <classname>Compass</classname> instance, by having the ability to add different mapping definitions, configure Compass based on xml or JSON configuration files, and expose a programmatic configuration options.
  </para>

  <sect1 id="core-configuration-programmatic">
    <title>Programmatic Configuration</title>

    <para>
      A <classname>Compass</classname> instance can be programatically configured using <classname>CompassConfiguration</classname>. Two main configuration aspects are adding mapping definitions, and setting different settings.
    </para>

    <para>
      <classname>CompassConfiguration</classname> provides several API's for adding mapping definitions (xml mapping files suffixed <literal>.cpm.xml</literal> or annotated classes), as well as Common Meta Data definition (xml mapping files suffixed <literal>.cmd.xml</literal>). The following table summarizes the most important API's:

      <table>
        <title>Configuration Mapping API</title>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="4*" />
          <colspec colname="c2" colwidth="5*" />
          <thead>
            <row>
              <entry>API</entry><entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>addFile(String)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified file path string.</entry>
            </row>
            <row>
              <entry><literal>addFile(File)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified file object reference.</entry>
            </row>
            <row>
              <entry><literal>addClass(Class)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal>) according to the specified class. <literal>test.Author.class</literal> will map to <literal>test/Author.cpm.xml</literal> within the class path. Can also add annotated classes if using Compass annotations support.</entry>
            </row>
            <row>
              <entry><literal>addURL(URL)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified URL.</entry>
            </row>
            <row>
              <entry><literal>addResource(String)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified resource path from the class path.</entry>
            </row>
            <row>
              <entry><literal>addInputStream(InputStream)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified input stream.</entry>
            </row>
            <row>
              <entry><literal>addDirectory(String)</literal></entry>
              <entry>Loads all the files named <literal>*.cpm.xml</literal> or <literal>*.cmd.xml</literal> from within the specified directory.</entry>
            </row>
            <row>
              <entry><literal>addJar(File)</literal></entry>
              <entry>Loads all the files named <literal>*.cpm.xml</literal> or <literal>*.cmd.xml</literal> from within the specified Jar file.</entry>
            </row>
            <row>
              <entry><literal>addMapping(ResourceMapping)</literal></entry>
              <entry>Programmatically add resource mapping (domain model that represents different mappings such as XSEM, OSEM, and RSEM).</entry>
            </row>
            <row>
              <entry><literal>addScan(String basePackage, String pattern)</literal></entry>
              <entry>Scans for all the mappings that exist wihtin the base backage recursively. An optioal ant style pattern can be provided as well. The mappings detected are all the xml based mappings. Annotation based mappings will be detected automatically if either ASM or Javassist exists within the classpath.</entry>
            </row>
            <row>
              <entry><literal>addMappingResolver(MappingResolver)</literal></entry>
              <entry>Uses a class that implements the <literal>MappingResolver</literal> to get an <literal>InputStream</literal> for xml mapping definitions.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

    </para>

    <para>
       Other than mapping file configuration API, Compass can be configured through the <classname>CompassSettings</classname> interface. <classname>CompassSettings</classname> is similar to Java <literal>Properties</literal> class and is accessible via the <literal>CompassConfiguration.getSettings()</literal> or the <literal>CopmassConfiguration.setSetting(String setting, String value)</literal> methods. Compass's many different settings are explained in <xref linkend="core-settings"/>.
    </para>

    <para>
      Compass setting can also be defined programmatically using the <literal>org.compass.core.config.CompassEnvironment</literal> and <literal>org.compass.core.lucene.LuceneEnvironment</literal> classes (hold programmatic manifestation of all the different settings names).
    </para>

    <para>
      In terms of required settings, <literal>Compass</literal> only requires the <literal>compass.engine.connection</literal> (which maps to <literal>CompassEnvironment.CONNECTION</literal>) parameter defined.
    </para>

    <para>
      Global Converters (classes that implement Compass <classname>Converter</classname>) can also be registered with the configuration to be used by the created compass instances. The converters are registered under a logical name, and can be referenced in the mapping definitions. The method to register a global converter is <literal>registerConverter</literal>.
    </para>

    <para>
      Again, many words and so little code... . The following code example shows the minimal <literal>CompassConfiguration</literal> with programmatic control:
<programlisting><![CDATA[CompassConfiguration conf = new CompassConfiguration()
     .setSetting(CompassEnvironment.CONNECTION, "my/index/dir")
     .addResource(DublinCore.cmd.xml)
     .addClass(Author.class);
]]></programlisting>
    </para>
    
    <para>
      An important aspect of settings (properties like) configuration is the notion of group settings. Similar to the way <ulink url="http://logging.apache.org/log4j/">log4j</ulink> properties configuration file works, different aspects of Compass need to be configured in a grouped nature. If we take Compass converter configuration as an example, here is an example of a set of settings to configure a custom converter called <literal>test</literal>:
<programlisting><![CDATA[org.compass.converter.test.type=eg.TestConverter
org.compass.converter.test.param1=value1
org.compass.converter.test.param2=value2
]]></programlisting>
    </para>
    
    <para>
      Compass defined prefix for all converter configuration is <literal>org.compass.converter</literal>. The segment that comes afterwards (up until the next '.') is the converter (group) name, which is set to <literal>test</literal>. This will be the converter name that the converter will be registered under (and referenced by in different mapping definitions).  Within the group, the following settings are defined: <literal>type</literal>, <literal>param1</literal>, and <literal>param2</literal>. <literal>type</literal> is one of the required settings for a custom Compass converter, and has the value of the fully qualified class name of the converter implementation. <literal>param1</literal> and <literal>param2</literal> are custom settings, that can be used by the custom converter (it should implement <classname>CompassConfigurable</classname>).
    </para>

  </sect1>

  <sect1 id="core-configuration-xml">
     <title>XML/JSON Configuration</title>

     <para>
       All of Compass's operational configuration (apart from mapping definitions) can be defined in a single xml configuration file, with the default name <literal>compass.cfg.xml</literal>. You can define the environmental settings and mapping file locations within this file. The following table shows the different <classname>CompassConfiguration</classname> API's for locating the main configuration file:
     </para>
     
     <para>
       <table>
         <title>Compass Configuration API</title>
         <tgroup cols="2">
           <colspec colname="c1" colwidth="3*" />
           <colspec colname="c2" colwidth="5*" />
           <thead>
             <row><entry>API</entry><entry>Description</entry></row>
           </thead>
           <tbody>
             <row>
               <entry><literal>configure()</literal></entry>
               <entry>Loads a configuration file called <literal>compass.cfg.xml</literal> from the root of the class path.</entry>
             </row>
             <row>
               <entry><literal>configure(String)</literal></entry>
               <entry>Loads a configuration file from the specified path</entry>
             </row>
           </tbody>
         </tgroup>
       </table>

     </para>
     
     <sect2 id="core-configuration-xml-schema">
        <title>Schema Based Configuration</title>
     
        <sidebar>
          <title>Schema and Settings</title>
          <para>
            Compass uses the schema based configuration as a different view on top of its support for settings based configuration (properties like). Compass translates all the different, more expressive, xml structure into their equivalent settings as described in <xref linkend="core-settings"/>.
          </para>
        </sidebar>
     
        <para>
           The preferred way to configure Compass (and the simplest way) is to use an Xml configuration file, which validates against a Schema. It allows for richer and more descriptive (and less erroneous) configuration of Compass. The schema is fully annotated, with each element and attribute documented within the schema. Note, that some additional information is explained in the Configuration Settings appendix, even if it does not apply in terms of the name of the setting to be used, it is advisable to read the appropriate section for more fuller explanation (such as converters, highlighters, analyzers, and so on).
        </para>
        
        <para>
           Here are a few sample configuration files, just to get a feeling of the structure and nature of the configuration file. The first is a simple file based index with the OSEM definitions for the Author class.

<programlisting><![CDATA[<compass-core-config xmlns="http://www.compass-project.org/schema/core-config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.compass-project.org/schema/core-config
           http://www.compass-project.org/schema/compass-core-config-2.2.xsd">

   <compass name="default">
      <connection>
          <file path="target/test-index"/>
      </connection>
   
      <mappings>
          <class name="test.Author" />
      </mappings>
   
   </compass>
</compass-core-config>                
]]></programlisting>
        </para>
     
        <para>
           The next sample configures a jdbc based index, with a bigger buffer size for default file entries:
        
<programlisting><![CDATA[<compass-core-config xmlns="http://www.compass-project.org/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.compass-project.org/schema/core-config
          http://www.compass-project.org/schema/compass-core-config-2.2.xsd">

   <compass name="default">

     <connection>
         <jdbc dialect="org.apache.lucene.store.jdbc.dialect.HSQLDialect">
             <dataSourceProvider>
                 <driverManager url="jdbc:hsqldb:mem:test" username="sa" password="" 
                                driverClass="org.hsqldb.jdbcDriver" />
             </dataSourceProvider>
             <fileEntries>
                 <fileEntry name="__default__">
                     <indexInput bufferSize="4096" />
                     <indexOutput bufferSize="4096" />
                 </fileEntry>
             </fileEntries>
         </jdbc>
     </connection>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>

        <para>
           The next sample configures a jdbc based index, with a JTA transaction (note the managed="true" and commitBeforeCompletion="true"):

<programlisting><![CDATA[<compass-core-config xmlns="http://www.compass-project.org/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.compass-project.org/schema/core-config
          http://www.compass-project.org/schema/compass-core-config-2.2.xsd">

   <compass name="default">

     <connection>
         <jdbc dialect="org.apache.lucene.store.jdbc.dialect.HSQLDialect" managed="true">
             <dataSourceProvider>
                 <driverManager url="jdbc:hsqldb:mem:test" username="sa" password="" 
                                driverClass="org.hsqldb.jdbcDriver" />
             </dataSourceProvider>
         </jdbc>
     </connection>
     <transaction factory="org.compass.core.transaction.JTASyncTransactionFactory" commitBeforeCompletion="true">
     </transaction>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>
      
         <para>
            Here is another sample, that configures another analyzer, a specialized Converter, and changed the default date format for all Java Dates (date is an internal name that maps to Compass default date Converter).
         
<programlisting><![CDATA[<compass-core-config xmlns="http://www.compass-project.org/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.compass-project.org/schema/core-config
          http://www.compass-project.org/schema/compass-core-config-2.2.xsd">

   <compass name="default">

      <connection>
          <file path="target/test-index"/>
      </connection>
   
      <converters>
          <converter name="date" type="org.compass.core.converter.basic.DateConverter">
              <setting name="format" value="yyyy-MM-dd" />
          </converter>
          <converter name="myConverter" type="test.Myconverter" />
      </converters>
   
      <searchEngine>
          <analyzer name="test" type="Snowball" snowballType="Lovins">
              <stopWords>
                  <stopWord value="test" />
              </stopWords>
          </analyzer>
      </searchEngine>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>
      
         <para>
            The next configuration uses lucene transaction isolation, with a higher ram buffer size for faster indexing.

<programlisting><![CDATA[<compass-core-config xmlns="http://www.compass-project.org/schema/core-config"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.compass-project.org/schema/core-config
         http://www.compass-project.org/schema/compass-core-config-2.2.xsd">

  <compass name="default">

     <connection>
         <file path="target/test-index"/>
     </connection>

     <transaction isolation="lucene" />
     
     <settings>
       <setting name="compass.engine.ramBufferSize" value="64" />
     </settings>
  </compass>
</compass-core-config>
]]></programlisting>     
        </para>
        
    </sect2>

  <sect2 id="core-configuration-xml-json">
    <title>JSON Based Configuration</title>

      <para>
         Compass can be configured using JSON based configuration. Basically, the JSON configuration breaks the settings into JSON elements. The Configuration Settings are explained in <xref linkend="core-settings"/>. Here is an example:
 <programlisting><![CDATA[
   {
       compass : {
           engine : {
               connection : "test-index"
           },

           event : {
               preCreate : {
                   event1 : {
                       type : "test.MyEvent1"
                   },
                   event2 : {
                       type : "test.MyEvent2"
                   }
               }
           }
       }
   }
]]></programlisting>
      </para>
  </sect2>

  <sect2 id="core-configuration-xml-dtd">
    <title>DTD Based Configuration</title>
      
      <para>
         Compass can be configured using a DTD based xml configuration. The DTD configuration is less expressive than the schema based one, allowing to configure mappings and Compass settings. The Configuration Settings are explained in <xref linkend="core-settings"/>.
      </para>

      <para>
        And here is an example of the xml configuration file:
<programlisting><![CDATA[<!DOCTYPE compass-core-configuration PUBLIC
"-//Compass/Compass Core Configuration DTD 2.2//EN"
"http://www.compass-project.org/dtd/compass-core-configuration-2.2.dtd">

<compass-core-configuration>
  
  <compass>
    <setting name="compass.engine.connection">my/index/dir</setting>

    <meta-data resource="vocabulary/DublinCore.cmd.xml" />
    <mapping resource="test/Author.cpm.xml" />

  </compass>
</compass-core-configuration>
]]></programlisting>
    </para>
    
    </sect2>

  </sect1>

  <sect1 id="core-configuration-reference">
    <title>Obtaining a Compass reference</title>

    <para>
      After <classname>CompassConfiguration</classname> has been set (either programmatic or using the XML configuration file), you can now build a <classname>Compass</classname> instance. <classname>Compass</classname> is intended to be shared among different application threads. The following simple code example shows how to obtain a <classname>Compass</classname> reference.
      <programlisting><![CDATA[Compass compass = cfg.buildCompass();
      ]]></programlisting>
      Note: It is possible to have multiple <classname>Compass</classname> instances within the same application, each with a different configuration.
    </para>

  </sect1>

  <sect1 id="core-configuration-rebuild">
    <title>Rebuilding Compass</title>

    <para>
      Compass allows to dynamically add and remove mappings using <literal>CompassConfigurartion</literal> that can be obtained from the <literal>Compass</literal> instance. Once all changes are done on the configuration object, <literal>Compass#rebuild</literal> operation. Here is an example:
<programlisting><![CDATA[Compass compass = cfg.buildCompass();
// ...
compass.getConfig().removeMappingByClass(A.class);
compass.getConifg().addClass(B.class);
compass.rebuild();
]]></programlisting>
    </para>
    
    <para>
      The "old" Compass instance is closed after a graceful time (default to 60 seconds). The time can be controlled using the following setting: <literal>compass.rebuild.sleepBeforeClose</literal>.
    </para>

  </sect1>

  <sect1 id="core-configuration-events">
    <title>Configuring Callback Events</title>

    <para>
      Compass allows to configure events that will be fired once certain operations occur in using Compass, for example, <literal>save</literal> operation.
    </para>

    <para>
      Configuring event listener can be done settings. For example, to configure a pre save event listener, the following setting should be used: <literal>compass.event.preSave.mylistener.type</literal> and its value can be the actual class name of the listener.
    </para>
    
    <para>
      More information for each listener can be found in the javadoc under the <literal>org.compass.events</literal> package. An important note with regards to pre listener is the fact that they can filter out certain operations.
    </para>

  </sect1>

</chapter>
