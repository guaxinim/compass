<chapter id="spring-introduction">
  <title>Introduction</title>

    <sect1 id="spring-overview">
      <title>Overview</title>

      <para>
        Compass::Spring aim is to provide closer integration with the <ulink url="http://www.springframework.org">springframework</ulink>. The following list summarizes the main integration points with Spring.

        <itemizedlist>
          <listitem>
            <para>
              Support for a <literal>Compass</literal> level factory bean, with Spring IOC modelled configuration options.
            </para>
          </listitem>
          <listitem>
            <para>
              Compass DAO level support (similar to the ORM dao support), with transaction integration and Compass DAO support class.
            </para>
          </listitem>
          <listitem>
            <para>
              An extension on top of Spring's Hibernate 3 dao support which extends Compass::Gps Hibernate 3 device. Handles Spring proxing of the Hibernate <literal>SessionFactory</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              An extension on top of Spring's OJB dao support which extends Compass::Gps OJB device. Mainly provides non programmatic configuration with OJB.
            </para>
          </listitem>
          <listitem>
            <para>
              Extension to Spring MVC, providing Search controller (based on Compass::Core search capabilities) and an Index controller (based on Compass::Gps index operation).
            </para>
          </listitem>
        </itemizedlist>

      </para>

    </sect1>

    <sect1 id="spring-def">
      <title>Compass Definition in Application Context</title>

      <para>
        Compass::Spring provides the ability to expose <literal>Compass</literal> as a Spring bean from an application context file. Application objects that need to access <literal>Compass</literal> will obtain a reference to a pre-defined instance via bean references. The following is an example of a Spring XML application context definition configuring <literal>Compass</literal>:
<programlisting><![CDATA[<beans>

    ...

<bean id="compass"
   class="org.compass.spring.LocalCompassBean">

   <property name="resourceLocations">
     <list>
       <value>classpath:org/compass/spring/test/A.cpm.xml</value>
     </list>
   </property>
   <property name="compassSettings">
      <props>
         <prop key="compass.engine.connection">
            target/testindex
         </prop>
         <!-- This is the default transaction handling
              (just explicitly setting it) -->
         <prop key="compass.transaction.factory">
            org.compass.core.transaction.LocalTransactionFactory
         </prop>
      </props>
   </property>
</bean>

    ...

</beans>
]]></programlisting>

    </para>

    <para>
       If using a Spring <literal>PlatformTransactionManager</literal>, you should also initialize the <literal>transactionManager</literal> property of the <literal>LocalCompassBean</literal>.
    </para>

    <para>
       Also, of storing the index within a database, be sure to set the <literal>dataSource</literal> property of the <literal>LocalCompassBean</literal>. It will be automatically wrapped by Spring's <literal>TransactionAwareDataSourceProxy</literal> if not wrapped already.
    </para>

    <para>
      When using Compass code within an already managed code (within a transaction), it is enough to just use <literal>Compass#openSession()</literal>, without worrying about Compass transaction management code, or even closing the session. Since even opening the session should not be really required, a <literal>LocalCompassSessionBean</literal> can be used to directly inject <literal>CompassSession</literal> to be used. It can be initialized with a <literal>Compass</literal> instance, but if there is only one within Spring application context, it will automatically identify and use it (this feature is similar to @CompassContext annotation explained later).
    </para>

    <para>
      Compass also supports <classname>@CompassContext</classname> annotations to inject either <classname>Compass</classname> instance or <classname>CompassSession</classname> instance. The annotation can be used on either a class field or on a property setter. In order to inject the annotation, the bean <classname>org.compass.spring.support.CompassContextBeanPostProcessor</classname> need to be added to the bean configuration. If Spring 2 new schema based support is used, <literal>compass:context</literal> can be used.
    </para>

    <para>
      Compass Spring integration also supports Spring 2 new schema based configuration. Using Compass own schema definition, the configuration of a Compass instance can be embedded within a Spring beans schema based configuration. Here is an example of using the new schema based configuration:

<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:compass="http://www.compass-project.org/schema/spring-core-config"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.compass-project.org/schema/spring-core-config http://www.compass-project.org/schema/spring-compass-core-config-2.2.xsd">

    <bean id="transactionManager" ...>
      ...
    </bean>

    <compass:compass name="compass" txManager="transactionManager">
        <compass:connection>
            <compass:file path="target/test-index" />
        </compass:connection>
    </compass:compass>

    <!-- A direct LocalCompassSessionBean, used with code within a transaciton context -->
    <compass:session id="sess" />
</beans>
]]></programlisting>

    </para>

  </sect1>

</chapter>
