<chapter id="gps-hibernate">
    <title>Hibernate</title>

    <sect1 id="hibernate-introduction">
      <title>Introduction</title>

      <para>
        The Hibernate Gps Device provides support for database indexing through the use of <ulink url="http://hibernate.org">Hibernate</ulink> ORM mappings. If your application uses Hibernate, it couldn't be easier to integrate Compass into your application (Sometimes with no code attached - see the petclinic sample).
      </para>

      <para>
        Hibernate Gps Device utilizes Compass::Core OSEM feature (Object to Search Engine Mappings) and Hibernate ORM feature (Object to Relational Mappings) to provide simple database indexing. As well as Hibernate 3 new event based system to provide real time mirroring of data changes done through Hibernate. The path data travels through the system is:  Database -- Hibernate -- Objects -- Compass::Gps -- Compass::Core (Search Engine).
      </para>
      
      <para>
        Hibernate Gps Device extends Compass Gps <classname>AbstractParallelGpsDevice</classname> and supports parallel index operations. It is discussed in more detail here: <xref linkend="gps-paralleldevice"/>.
      </para>

    </sect1>

    <sect1 id="hibernate-configuration">
      <title>Configuration</title>

      <para>
        When configuring the Hibernate device, one must instantiate <literal>HibernateGpsDevice</literal>. After instantiating the device, it must be initialized with a Hibernate <literal>SessionFactory</literal>. 
      </para>

      <para>
        Here is a code sample of how to configure the hibernate device:
<programlisting><![CDATA[Compass compass = ... // set compass instance
SingleCompassGps gps = new SingleCompassGps(compass);
CompassGpsDevice hibernateDevice = new HibernateGpsDevice("hibernate", sessionFactory);
gps.addDevice(hibernateDevice);
.... // configure other devices
gps.start();
]]></programlisting>
      </para>

		<para>
			In order to register event listener with Hibernate <classname>SessionFactory</classname>, the actual instance of the session factory need to be obtained. The Hibernate device allows for a pluggable <classname>NativeHibernateExtractor</classname> implementation responsible for extracting the actual instance. Compass comes with a default implementation when working within a Spring environment called: <classname>SpringNativeHibernateExtractor</classname>.
		</para>

		<sect2 id="dep-hibernate-device">
			<title>Deprecated Hibernate Devices</title>
			
			<para>
				For backward compatibility, Compass supports previous <literal>Hibernate2GpsDevice</literal> and <literal>Hibenrate3GpsDevice</literal>. The classes have moved to a different package, and are usable with a simple change to the package name. The new package for the deprecated devices is: <literal>org.compass.gps.device.hibernate.dep</literal>.
			</para>
			
			
			<sect3 id="dep-hibernate-configuration">
				<title>Configuration</title>

			    <para>When configuring the Hibernate device, one need to instantiate <literal>HibernateGpsDevice</literal>. The device requires the Hibernate <literal>SessionFactory</literal> and a logical "name".
		        </para>

			    <para>
			    	Here is a code sample of how to configure the hibernate device:
<programlisting><![CDATA[Compass compass = ... // set compass instance
SingleCompassGps gps = new SingleCompassGps(compass);
CompassGpsDevice hibernateDevice = new HibernateGpsDevice("hibernate", sessionFactory);
gps.addDevice(hibernateDevice);
.... // configure other devices
gps.start();
]]></programlisting>
			    </para>
			</sect3>
		</sect2>

    </sect1>

    <sect1 id="hibernate-index">
      <title>Index Operation</title>

      <para>
        Hibernate Gps device provides the ability to index a database. Compass will index objects (or their matching database tables in the Hibernate mappings) specified in both the Hibernate mappings and Compass::Core mappings (OSEM) files.
      </para>

	  <para>
		The indexing process is pluggable and Compass comes with two implementations. The first, <classname>PaginationHibernateIndexEntitiesIndexer</classname>, uses <literal>setFirstResult</literal> and <literal>setMaxResults</literal> in order to perform pagination. The second one, <classname>ScrollableHibernateIndexEntitiesIndexer</classname>, uses Hibernate scrollable resultset in order to index the data. The default indexer used is the scrollable indexer.
	  </para>
	
	  <para>
		During the indexing process Compass will execute a default query which will fetch all the relevant data from the database using Hibernate. The query itself can be controlled both by setting a static sql query and providing a query provider. This setting applies per entity. Note, when using the scrollable indexer, it is preferable to use a custom query provider that will return specific Hibernate <literal>Criteria</literal> instead of using static sql query.
	  </para>

    </sect1>

    <sect1 id="hibernate-datamirroring">
      <title>Real Time Data Mirroring</title>

      <para>
        The Hibernate Gps Device, with Hibernate 3 event system, provides support for real time data mirroring. Data changes via Hibernate are reflected in the Compass index. There is no need to configure anything in order to enable the feature, the device takes care for it all.
      </para>

      <para>
        An important point when configuring the hibernate device is that both the application and the hibernate device must use the same <literal>SessionFactory</literal>.
      </para>

      <para>
        If using Hibernate and the Spring Framework, please see the <link linkend="spring-hibernate">SpringHibernate3GpsDevice</link>
      </para>

    </sect1>
    
    <sect1 id="hibernate-transaction">
        <title>HibernateSyncTransaction</title>

        <para>
            Compass integrates with Hibernate transaction synchronization services. This  means that whichever Hibernate transaction management is used (Jta, JDBC, ...) you are using, the <literal>HibernateSyncTransaction</literal> will synchronize with the transaction upon transaction completion. The Hibernate transaction support uses Hibernate context session in order to obtain the current session and the current transaction. The application using this feature must also use Hibernate context session (which is the preferred Hibernate usage model starting from Hibernate 3.2).
        </para>

        <para>
            If you are using the <literal>HibernateSyncTransaction</literal>, a Hibernate based transaction must already be started in order for HibernateSyncTransaction to join. If no transaction is started, Compass can start one (and will commit it eventually). Note, if you are using other transaction management abstraction (such as Spring), it is preferable to use it instead of this transaction factory.
        </para>

        <para>
            In order to configure Compass to work with the <literal>HiberanteSyncTransaction</literal>, you must set the <literal>compass.transaction.factory</literal> to <literal>org.compass.gps.device.hiberante.transaction.HibernateSyncTransactionFactory</literal>. Additional initialization should be performed by calling <literal>HibernateSyncTransactionFactory.setSessionFactory</literal> with Hibernate <literal>SessionFactory</literal> instance before the <literal>Compass</literal> is created.
        </para>

    </sect1>
    
    <sect1 id="hibernate-transaction-interceptor">
        <title>Hibernate Transaction Interceptor</title>
        
        <para>
            When working with Hibernate transactions (and not utilizing Hibernate context session) and Compass local transactions, an Compass implementation of Hibernate <literal>Interceptor</literal> can be used to synchronize with a Hibernate session. <literal>CompassTransactionInterceptor</literal> can be used to inject an instance of itself into Hibernate <literal>SessionFactory</literal>. Please refer to its javadoc for more information.
        </para>
    </sect1>
    

</chapter>
