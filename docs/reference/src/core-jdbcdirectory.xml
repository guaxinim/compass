<appendix id="jdbcdirectory">
  <title>Lucene Jdbc Directory</title>
  <sect1 id="jdbcdir-overview">
    <title>Overview</title>

    <para>
        A Jdbc based implementation of Lucene <literal>Directory</literal> allowing the storage of a Lucene index within a database. Enables existing or new Lucene based application to store the Lucene index in a database with no or minimal change to typical Lucene code fragments.
    </para>

    <para>
        The <literal>JdbcDirectory</literal> is highly configurable, using the optional <literal>JdbcDirectorySettings</literal>. All the settings are described in the javadoc, and most of them will be made clear during the next sections.
    </para>

    <para>
        There are several options to instantiate a Jdbc directory, they are:
        <table>
            <title>Jdbc Directory Constructors</title>
            <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
                <row>
                    <entry>Parameters</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>DataSource</literal>, <literal>Dialect</literal>, <literal>tableName</literal></entry>
                    <entry>Creates a new <literal>JdbcDirectory</literal> using the given data source and dialect. <literal>JdbcTable</literal> and <literal>JdbcDirectorySettings</literal> are created based on default values.</entry>
                </row>
                <row>
                    <entry><literal>DataSource</literal>, <literal>Dialect</literal>, <literal>JdbcDirectorySettings</literal>, <literal>tableName</literal></entry>
                    <entry>Creates a new <literal>JdbcDirectory</literal> using the given data source, dialect, and <literal>JdbcDirectorySettings</literal>. The <literal>JdbcTable</literal> is created internally.</entry>
                </row>
                <row>
                    <entry><literal>DataSource</literal>, <literal>JdbcTable</literal></entry>
                    <entry>Creates a new <literal>JdbcDirectory</literal> using the given dialect, and <literal>JdbcTable</literal>. Creating a new <literal>JdbcTable</literal> requires a <literal>Dialect</literal> and <literal>JdbcDirectorySettings</literal>.</entry>
                </row>
            </tbody>
            </tgroup>
        </table>

    </para>

    <para>
        The Jdbc directory works against a single table (where the table name must be provided when the directory is created). The table schema is described in the following table:

        <table>
            <title>Jdbc Directory Table Schema</title>
            <tgroup cols="4">
            <colspec colname="c1" colwidth="2*" />
            <colspec colname="c2" colwidth="2*" />
            <colspec colname="c3" colwidth="2*" />
            <colspec colname="c4" colwidth="5*" />
            <thead>
                <row>
                    <entry>Column Name</entry>
                    <entry>Column Type</entry>
                    <entry>Default Column Name</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>Name</entry>
                    <entry>VARCHAR</entry>
                    <entry>name_</entry>
                    <entry>The file entry name. Similar to a file name within a file system directory. The column size is configurable and defaults to 50.</entry>
                </row>
                <row>
                    <entry>Value</entry>
                    <entry>BLOB</entry>
                    <entry>value_</entry>
                    <entry>A binary column where the content of the file is stored. Based on Jdbc <literal>Blob</literal> type. Can have a configurable size where appropriate for the database type.</entry>
                </row>
                <row>
                    <entry>Size</entry>
                    <entry>NUMBER</entry>
                    <entry>size_</entry>
                    <entry>The size of the current saved data in the Value column. Similar to the size of a file in a file system.</entry>
                </row>
                <row>
                    <entry>Last Modified</entry>
                    <entry>TIMESTAMP</entry>
                    <entry>lf_</entry>
                    <entry>The time that file was last modified. Similar to the last modified time of a file within a file system.</entry>
                </row>
                <row>
                    <entry>Deleted</entry>
                    <entry>BIT</entry>
                    <entry>deleted_</entry>
                    <entry>If the file is deleted or not. Only used for some of the file types based on the Jdbc directory. More is explained in later sections.</entry>
                </row>
            </tbody>
            </tgroup>
        </table>

    </para>

    <para>
        The Jdbc directory provides the following operations on top of the ones forced by the <literal>Directory</literal> interface:

        <table>
            <title>Extended Jdbc Directory Operations</title>
            <tgroup cols="2">
            <colspec colname="c1" colwidth="2*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
                <row>
                    <entry>Operation Name</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>create</literal></entry>
                    <entry>Creates the database table (with the above mentioned schema). The create operation drops the table first.</entry>
                </row>
                <row>
                    <entry><literal>delete</literal></entry>
                    <entry>Drops the table from the database.</entry>
                </row>
                <row>
                    <entry><literal>deleteContent</literal></entry>
                    <entry>Deletes all the rows from the table in the database.</entry>
                </row>
                <row>
                    <entry><literal>tableExists</literal></entry>
                    <entry>Returns if the table exists or not. Only supported on some of the databases.</entry>
                </row>
                <row>
                    <entry><literal>deleteMarkDeleted</literal></entry>
                    <entry>Deletes all the file entries that are marked to be deleted, and they were marked, and they were marked "delta" time ago (base on database time, if possible by dialect). The delta is taken from the <literal>JdbcDirectorySettings</literal>, or provided as a parameter to the deleteMarkDeleted operation.</entry>
                </row>
            </tbody>
            </tgroup>
        </table>
    </para>

    <para>
        The Jdbc directory requires a <literal>Dialect</literal> implementation that is specific to the database used with it. The following is a table listing the current dialects supported with the Jdbc directory:

        <table>
            <title>Jdbc Directory SQL Dialects</title>
            <tgroup cols="3">
            <colspec colname="c1" colwidth="5*" />
            <colspec colname="c2" colwidth="2*" />
            <colspec colname="c2" colwidth="4*" />
            <thead>
                <row>
                    <entry>Dialect</entry>
                    <entry>RDBMS</entry>
                    <entry>Blob Locator Support*</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.OracleDialect</literal></entry>
                    <entry>Oracle</entry>
                    <entry>Oracle Jdbc Driver - Yes</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.SQLServerDialect</literal></entry>
                    <entry>Microsoft SQL Server</entry>
                    <entry>jTds 1.2 - No. Microsoft Jdbc Driver - Unknown</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.MySQLDialect</literal></entry>
                    <entry>MySQL</entry>
                    <entry>MySQL Connector J 3.1/5 - Yes with <literal>emulateLocators=true</literal> in connection string.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.MySQLInnoDBDialect</literal></entry>
                    <entry>MySQL with InnoDB.</entry>
                    <entry>See MySQL</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.MySQLMyISAMDialect</literal></entry>
                    <entry>MySQL with MyISAM</entry>
                    <entry>See MySQL</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.PostgreSQLDialect</literal></entry>
                    <entry>PostgreSQL</entry>
                    <entry>Postgres Jdbc Driver - Yes.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.SybaseDialect</literal></entry>
                    <entry>Sybase / Sybase Anywhere</entry>
                    <entry>Unknown.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.InterbaseDialect</literal></entry>
                    <entry>Interbase</entry>
                    <entry>Unknown.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.FirebirdDialect</literal></entry>
                    <entry>Firebird</entry>
                    <entry>Unknown.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.DB2Dialect</literal></entry>
                    <entry>DB2 / DB2 AS400 / DB2 OS390</entry>
                    <entry>Unknown.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.DerbyDialect</literal></entry>
                    <entry>Derby</entry>
                    <entry>Derby Jdbc Driver- Unknown.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.dialect.HSQLDialect</literal></entry>
                    <entry>HypersonicSQL</entry>
                    <entry>HSQL Jdbc Driver - No.</entry>
                </row>
            </tbody>
            </tgroup>
        </table>
    </para>

    <para>
        * A Blob locator is a pointer to the actual data, which allows fetching only portions of the Blob at a time. Databases (or Jdbc drivers) that do not use locators usually fetch all the Blob data for each query (which makes using them impractical for large indexes). Note, the support documented here does not cover all the possible Jdbc drivers, please refer to your Jdbc driver documentation for more information.
    </para>

  </sect1>

  <sect1 id="jdbcdir-performance">
    <title>Performance Notes</title>

    <para>
        Minor performance improvements can be gained if <literal>JdbcTable</literal> is cached and used to create different <literal>JdbcDirectory</literal> instances.
    </para>

    <para>
        It is best to use a pooled data source (like Jakarta Commons DBCP), so <literal>Connection</literal>s won't get created every time, but be pooled.
    </para>

    <para>
        Most of the time, when working with Jdbc directory, it is best to work in a non compound index format. Since with databases there is no problem of too many files open, it won't be an issue. The package comes with a set of utilities to compound or uncompund an index, located in the <literal>org.apache.lucene.index.LuceneUtils</literal> class, just in case you already have an index and it is in the wrong structure.
    </para>

     <para>
        When indexing data, a possible performance improvement can be to index the data into the file system or memory, and then copy over the contents of the index to the database. <literal>org.apache.lucene.index.LuceneUtils</literal> comes with a utility to copy one directory to the other, and changing the compound state of the index while copying.
     </para>

  </sect1>


  <sect1 id="jdbcdir-transactionManagement">
    <title>Transaction Management</title>

    <para>
        <literal>JdbcDirectory</literal> performs no transaction management. All database related operations WITHIN IT work in the following manner:

<programlisting><![CDATA[Connection conn = DataSourceUtils.getConnection(dataSource);
// perform any database related operation using the connection
DataSourceUtils.releaseConnection(conn);
]]></programlisting>

    </para>

    <para>
        As you can see, no <literal>commit</literal> or <literal>rollback</literal> are called on the connection, allowing for any type of transaction management done outside of the actual <literal>JdbcDirectory</literal> related operations. Also, the fact that we are using the Jdbc <literal>DataSource</literal>, allows for plug able transaction management support (usually based on <literal>DataSource</literal> delegate and <literal>Connection</literal> proxy). <literal>DataSourceUtils</literal> is a utility class that comes with the Jdbc directory, and it's usage will be made clear in the following sections.
    </para>

    <para>
        There are several options when it comes to transaction management, and they are:
    </para>

    <sect2 id="jdbcdir-autoCommit">
        <title>Auto Commit Mode</title>

        <para>
            When configuring the <literal>DataSource</literal> or the <literal>Connection</literal> to use autoCommit (set it to <literal>true</literal>), no transaction management is required. Additional benefit is that any existing Lucene code will work as is with the <literal>JdbcDirectory</literal> (assuming that the <literal>Directory</literal> class was used instead of the actual implementation type).
        </para>

        <para>
            The main problems with using the Jdbc directory in the autoCommit mode are: performance suffers because of it, and not all database allow to use Blobs with autoCommit. As you will see later on, other transaction management are simple to use, and the Jdbc directory comes with a set of helper classes that make the transition into a "Jdbc directory enabled code" simple.
        </para>
    </sect2>

    <sect2 id="jdbcdir-dataSourcetr">
        <title>DataSource Transaction Management</title>

        <para>
            When the application does not use any transaction managers (like JTA or Spring's <literal>PlatformTransactionManager</literal>), the Jdbc directory comes with a simple local transaction management based on <literal>Connection</literal> proxy and thread bound <literal>Connection</literal>s.
        </para>

        <para>
            The <literal>TransactionAwareDataSourceProxy</literal> can wrap a <literal>DataSource</literal>, returning Jdbc <literal>Connection</literal> only if there is no existing <literal>Connection</literal> that was opened before (within the same thread) and not closed yet. Any call to the <literal>close</literal> method on this type of <literal>Connection</literal> (which we call a "not controlled" connection) will result in a no op. The <literal>DataSourceUtils#releaseConnection</literal> will also take care and not close the <literal>Connection</literal> if it is not controlled.
        </para>

        <para>
            So, how do we rollback or commit the <literal>Connection</literal>? <literal>DataSourceUtils</literal> has two methods, <literal>commitConnectionIfPossible</literal> and <literal>rollbackConnectionIfPossible</literal>, which will only commit/rollback the <literal>Connection</literal> if it was proxied by the <literal>TransactionAwareDataSourceProxy</literal>, and it is a controlled <literal>Connection</literal>.
        </para>

        <para>
            A simple code that performs the above mentioned:
<programlisting><![CDATA[JdbcDirectory jdbcDir = // ... create the jdbc directory
Connection conn = DataSourceUtils.getConnection(dataSource);
try {
    IndexReader indexReader = new IndexReader(jdbcDir); // you can also use an already open IndexReader
    // ...
    DataSourceUtils.commitConnectionIfPossible(conn); // will commit the connection if controlling it
} catch (IOException e) {
    DataSourceUtils.safeRollbackConnectionIfPossible(conn);
    throw e;
} finnaly {
    DataSourceUtils.releaseConnection(conn);
}
]]></programlisting>
        </para>

        <para>
            Note, that the above code will also work when you do have a transaction manager (as described in the next section), and it forms the basis for the <literal>DirectoryTemplate</literal> (described later) that comes with Jdbc directory.
        </para>
    </sect2>

    <sect2 id="jdbcdir-transactionmanager">
        <title>Using External Transaction Manager</title>

        <para>
            For environments that use external transaction managers (like JTA or Spring <literal>PlatformTransactionManager</literal>), the transaction management should be performed outside of the code that use the Jdbc directory. Do not use Jdbc directory <literal>TransactionAwareDataSourceProxy</literal>.
        </para>

        <para>
            For JTA for example, if Container Managed transaction is used, the executing code should reside within it. If not, JTA transaction should be executed programmatically.
        </para>

        <para>
            When using Spring, the executing code should reside within a transactional context, using either transaction proxy (AOP), or the <literal>PlatformTransactionManager</literal> and the <literal>TransactionTemplate</literal> programmatically. IMORTANT: When using Spring, you should wrap the <literal>DataSource</literal> with Spring's own <literal>TransactionAwareDataSourceProxy</literal>.
        </para>
    </sect2>

    <sect2 id="jdbcdir-directorytemplate">
        <title>DirectoryTemplate</title>

        <para>
            Since transaction management might require specific code to be written, Jdbc directory comes with a <literal>DirectoryTemplate</literal> class, which allows writing <literal>Directory</literal> implementation and transaction management vanilla code. The directory template perform transaction management support code only if the <literal>Directory</literal> is of type <literal>JdbcDirectory</literal> and the transaction management is a local one (Data Source transaction management).
        </para>

        <para>
            Each directory based operation (done by Lucene <literal>IndexReader</literal>, <literal>IndexSearcher</literal> and <literal>IndexWriter</literal>) should be wrapped by the <literal>DirectoryTemplate</literal>. An example of using it:

<programlisting><![CDATA[DirectoryTemplate template = new DirectoryTemplate(dir); // use a pre-configured directory
template.execute(new DirectoryTemplate.DirectoryCallbackWithoutResult() {
    protected void doInDirectoryWithoutResult(Directory dir) throws IOException {
        IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true);
        // index write operations
        write.close();
    }
});

// or, for example, if we have a cached IndexSearcher

template.execute(new DirectoryTemplate.DirectoryCallbackWithoutResult() {
    protected void doInDirectoryWithoutResult(Directory dir) throws IOException {
        // indexSearcher operations
    }
});

]]></programlisting>

        </para>

    </sect2>

  </sect1>

  <sect1 id="jdbcdir-fileEntryHandler">
    <title>File Entry Handler</title>

    <para>
        A <literal>FileEntryHandler</literal> is an interface used by the Jdbc directory to delegate file level operations to it. The <literal>JdbcDirectorySettings</literal> has a default file entry handler which handles all unmapped file names. It also provides the ability to register a <literal>FileEntryHandler</literal> against either an exact file name, or a file extension (3 characters after the '.').
    </para>

    <para>
        When the <literal>JdbcDirectory</literal> is created, all the different file entry handlers that are registered with the directory settings are created and configured. They will than be used to handle files based on the file names.
    </para>

    <para>
        When registering a new file entry handler, it must be registered with <literal>JdbcFileEntrySettings</literal>. The <literal>JdbcFileEntrySettings</literal> is a fancy wrapper around java <literal>Properties</literal> in order to provide an open way for configuring file entry handlers. When creating a new <literal>JdbcFileEntrySettings</literal> it already has sensible defaults (refer to the javadoc for them), but of course they can be changed. One important configuration setting is the type of the <literal>FileEntryHandler</literal>, which should be set under the constant setting name: <literal>JdbcFileEntrySettings#FILE_ENTRY_HANDLER_TYPE</literal> and should be the fully qualified class name of the file entry handler.
    </para>

    <para>
        The Jdbc directory package comes with three different <literal>FileEntryHandler</literal>s. They are:

        <table>
            <title>File Entry Handler Types</title>
            <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
                <row>
                    <entry>Type</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.handler. NoOpFileEntryHandler</literal></entry>
                    <entry>Performs no operations.</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.handler. ActualDeleteFileEntryHandler</literal></entry>
                    <entry>Performs actual delete from the database when the different delete operations are called. Also support configurable <literal>IndexInput</literal> and <literal>IndexOutput</literal> (described later).</entry>
                </row>
                <row>
                    <entry><literal>org.apache.lucene.store.jdbc.handler. MarkDeleteFileEntryHandler</literal></entry>
                    <entry>Marks entries in the database as deleted (using the deleted column) when the different delete operations are called. Also support configurable <literal>IndexInput</literal> and <literal>IndexOutput</literal> (described later).</entry>
                </row>
            </tbody>
            </tgroup>
        </table>
    </para>

    <para>
        Most of the files use the <literal>MarkDeleteFileEntryHandler</literal>, since there might be other currently open <literal>IndexReader</literal>s or <literal>IndexSearcher</literal>s that use the files. The <literal>JdbcDirectory</literal> provide the <literal>deleteMarkDeleted()</literal> and <literal>deleteMarkDeleted(delta)</literal> to actually purge old entries that are marked as deleted. It should be scheduled and executed once in a while in order to keep the database table compact.
    </para>

    <para>
        When creating new <literal>JdbcDirectorySettings</literal>, it already registers different file entry handlers for specific files automatically. For example, the <literal>deleted</literal> file is registered against a <literal>NoOpFileEntryHandler</literal> since we will always be able to delete entries from the database (the <literal>deleted</literal> file is used to store files that could not be deleted from the file system). This results in better performance since no operations are executed against the deleted (or deleted related files). Another example, is registering the <literal>ActualDeleteFileEntryHandler</literal> against the <literal>segments</literal> file, since we do want to delete it and replace it with a new one when it is written.
    </para>

    <sect2 id="jdbcdir-indexInput">
        <title>IndexInput Types</title>

        <para>
            Each file entry handler can be associated with an implementation of <literal>IndexInput</literal>. Setting the <literal>IndexInput</literal> should be set under the constant <literal>JdbcFileEntrySettings#INDEX_INPUT_TYPE_SETTING</literal> and be the fully qualified class name of the <literal>IndexInput</literal> implementation.
        </para>

        <para>
            The Jdbc directory comes with the following <literal>IndexInput</literal> types:

            <table>
                <title>Index Input Types</title>
                <tgroup cols="2">
                <colspec colname="c1" colwidth="3*" />
                <colspec colname="c2" colwidth="5*" />
                <thead>
                    <row>
                        <entry>Type</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index. FetchOnOpenJdbcIndexInput</literal></entry>
                        <entry>Fetches and caches all the binary data from the database when the <literal>IndexInput</literal> is opened. Perfect for small sized file entries (like the segments file).</entry>
                    </row>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index. FetchOnBufferReadJdbcIndexInput</literal></entry>
                        <entry>Extends the <literal>JdbcBufferedIndexInput</literal> class, and fetches the data from the database every time the internal buffer need to be refilled. The <literal>JdbcBufferedIndexInput</literal> allows setting the buffer size using the <literal>JdbcBufferedIndexInput#BUFFER_SIZE_SETTING</literal>. Remember, that you can set different buffer size for different files by registering different file entry handlers with the <literal>JdbcDirectorySettings</literal>.</entry>
                    </row>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index.  FetchPerTransactionJdbcIndexInput</literal></entry>
                        <entry>Caches blobs per transaction. Only supported for dialects that supports blobs per transaction. Note, using this index input requires calling the <literal>FetchPerTransactionJdbcIndexInput#releaseBlobs(java.sql.Connection)</literal> when the transaction ends. It is automatically taken care of if using <literal>TransactionAwareDataSourceProxy</literal>. If using JTA for example, a transcation synchronization should be registered with JTA to clear the blobs. Extends the <literal>JdbcBufferedIndexInput</literal> class, and fetches the data from the database every time the internal buffer need to be refilled. The <literal>JdbcBufferedIndexInput</literal> allows setting the buffer size using the <literal>JdbcBufferedIndexInput#BUFFER_SIZE_SETTING</literal>. Remember, that you can set different buffer size for different files by registering different file entry handlers with the <literal>JdbcDirectorySettings</literal>.</entry>
                    </row>
                </tbody>
                </tgroup>
            </table>
        </para>

        <para>
            The <literal>JdbcDirectorySettings</literal> automatically registers sensible defaults for the default file entry handler and specific ones for specific files. Please refer to the javadocs for the defaults.
        </para>

    </sect2>

    <sect2 id="jdbcdir-indexOutput">
        <title>IndexOutput Types</title>

        <para>
            Each file entry handler can be associated with an implementation of <literal>IndexOutput</literal>. Setting the <literal>IndexOutput</literal> should be set under the constant <literal>JdbcFileEntrySettings#INDEX_OUTPUT_TYPE_SETTING</literal> and be the fully qualified class name of the <literal>IndexOutput</literal> implementation.
        </para>

        <para>
            The Jdbc directory comes with the following <literal>IndexOutput</literal> types:

            <table>
                <title>Index Output Types</title>
                <tgroup cols="2">
                <colspec colname="c1" colwidth="3*" />
                <colspec colname="c2" colwidth="5*" />
                <thead>
                    <row>
                        <entry>Type</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index. RAMJdbcIndexOutput</literal></entry>
                        <entry>Extends the <literal>JdbcBufferedIndexOutput</literal> class, and stores the data to be written in memory (within a growing list of bufferSize sized byte arrays). The <literal>JdbcBufferedIndexOutput</literal> allows setting the buffer size using the <literal>JdbcBufferedIndexOutput#BUFFER_SIZE_SETTING</literal>. Perfect for small sized file entries (like the segments file).</entry>
                    </row>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index. FileJdbcIndexOutput</literal></entry>
                        <entry>Extends the <literal>JdbcBufferedIndexOutput</literal> class, and stores the data to be written in a temporary file. The <literal>JdbcBufferedIndexOutput</literal> allows setting the buffer size using the <literal>JdbcBufferedIndexOutput#BUFFER_SIZE_SETTING</literal> (a write is performed every time the buffer is flushed).</entry>
                    </row>
                    <row>
                        <entry><literal>org.apache.lucene.store.jdbc.index. RAMAndFileJdbcIndexOutput</literal></entry>
                        <entry>A special index output, that first starts with a RAM based index output, and if a configurable threshold is met, switches to file based index output. The threshold setting cab be configured using <literal>RAMAndFileJdbcIndexOutput#INDEX_OUTPUT_THRESHOLD_SETTING</literal>.</entry>
                    </row>
                </tbody>
                </tgroup>
            </table>
        </para>

        <para>
            The <literal>JdbcDirectorySettings</literal> automatically registers sensible defaults for the default file entry handler and specific ones for specific files. Please refer to the javadocs for the defaults.
        </para>

    </sect2>

  </sect1>

</appendix>


