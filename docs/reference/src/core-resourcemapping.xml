<chapter id="core-rsem">
    <title>RSEM - Resource/Search Engine Mapping</title>

    <sect1 id="resourcemapping-introduction">
      <title>Introduction</title>

      <para>
        Compass provides OSEM technology for use with an applications Object domain model or XSEM when working with xml data structures. Compass also provides Resource Mapping technology for resources other than Objects/XML (that do not benefit from OSEM). The benefits of using Resources can be summarized as:

        <itemizedlist>
          <listitem>
            <para>
               Your application does not have a domain model (therefore cannot use OSEM), but you still want to use the functionality of Compass.
            </para>
          </listitem>
          <listitem>
            <para>
                Your application already works with Lucene, but you want to add Compass additional features (i.e. transactions, fast updates). Working with <literal>Resources</literal> makes your migration easy (as it is similar to working with Lucene Document).
            </para>
          </listitem>
          <listitem>
            <para>
               You execute a query and want to update all the meta-data (<literal>Resource Property</literal>) with a certain value. You use OSEM in your application, but you do not wish to iterate through the results, performing run-time object type checking and casting to the appropriate object type before method call. You can simply use the <literal>Resource</literal> interface and treat all the results in the same abstracted way.
            </para>
          </listitem>
        </itemizedlist>

      </para>

    </sect1>

    <sect1 id="rsem-mappingdeclaration">
      <title>Mapping Declaration</title>

      <para>
        In order to work directly with a <literal>Resource</literal>, Compass needs to know the alias and the primary properties (i.e. primary keys in data-base systems) associated with the <literal>Resource</literal>. The primary properties are also known as id properties. This information is declared in Resource Mapping XML documents, so that Compass knows how to manage the <literal>Resource</literal> internally (this is needs especially for update/delete operations).
      </para>

      <para>
        Here is an example of a Resource Mapping XML document:

<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE compass-core-mapping PUBLIC
    "-//Compass/Compass Core Mapping DTD 2.2//EN"
    "http://www.compass-project.org/dtd/compass-core-mapping-2.2.dtd">

<compass-core-mapping>

  <resource alias="a">
    <resource-id name="id" />
  </resource>

  <resource alias="b">
    <resource-id name="id1" />
    <resource-id name="id2" />
  </resource>

  <resource alias="c">
    <resource-id name="id" />
    <resource-property name="value1" />
    <resource-property name="value2" store="yes" index="analyzed" />
    <resource-property name="value3" store="compress" index="analyzed" />
    <resource-property name="value4" store="yes" index="not_analyzed" />
    <resource-property name="value5" store="yes" index="no" converter="my-date" />
  </resource>
</compass-core-mapping>
]]></programlisting>

      </para>

      <para>
        And here is the same example using JSON mapping configuration:

<programlisting><![CDATA[{
  "compass-core-mapping" : {
    "resource" : [
      {
        alias : "a",
        id : {name : " id"}
      },
      {
        alias : "b",
        id : [
          {name : "id1"},
          {name : "id2"}
        ]
      },
      {
        alias : "c",
        property : [
          { name : "value1"},
          { name : "value2", store : "yes", index : "analyzed"},
          { name : "value3", store : "compress", index : "analyzed"},
          { name : "value4", store : "yes", index : not_analyzed""},
          { name : "value5", store : "yes", index : "no", converter : "my-date"}
        ]
      }
    ]
  }
}
]]></programlisting>

      </para>
      
      <para>
          Last, here is the same example using programmatic configuration:
          
<programlisting><![CDATA[
import static org.compass.core.mapping.rsem.builder.RSEM.*;    
    
    
CompassConfiguration conf = new CompassConfiguration();
conf.addMapping(
    resource("a")
        .add(id("id"))
);
conf.addMapping(
    resource("b")
        .add(id("id1"))
        .add(id("id2"))
);
conf.addMapping(
    resource("c")
        .add(id("id1"))
        .add(property("value1"))
        .add(property("value2").store(Property.Store.YES).index(Property.Index.ANALYZED))
        .add(property("value3").store(Property.Store.COMPRESS).index(Property.Index.ANALYZED))
        .add(property("value4").store(Property.Store.YES).index(Property.Index.NOT_ANALYZED))
        .add(property("value5").store(Property.Store.YES).index(Property.Index.NO).converter("my-date"))
);
]]></programlisting>
      </para>

      <para>
        Now that the Resource Mapping has been declared, you can create the Resource in the application. In the following code example the Resource is created with an alias and id property matching the Resource Mapping declaration.
      </para>

      <para>
<programlisting><![CDATA[ResourceFactory resourceFactory = compass.getResourceFactory();
Resource r = resourceFactory.createResource("a");
Property id = resourceFactory.createProperty("id", "1",
    Property.Store.YES, Property.Index.NOT_ANALYZED);
r.addProperty(id);
r.addProperty(resourceFactory.createProperty("mvalue", "property test",
    Property.Store.YES, Property.Index.ANALYZED));

session.save(r);]]></programlisting>
      </para>

      <para>
          The Resource Mapping file example above defines mappings for three resource types (each identified with a different alias). Each resource has a set of resource ids that are associated with it. The value for the <literal>resource-id</literal> tag is the name of the <literal>Property</literal> that is associated with the primary property for the <literal>Resource</literal>.
      </para>

      <para>
        The third mapping (alias "c"), defines <literal>resource-property</literal> mappings as well as <literal>resource-id</literal> mappings. The <literal>resource-property</literal> mapping works with the <literal>Resource#addProperty(String name, Object value)</literal> operation. It provides definitions for the resource properties that are added (<literal>index</literal>, <literal>store</literal>, and so on), and they are then looked up when using the mentioned add method. Using the <literal>resource-property</literal> mapping, helps clean up the code when constructing a <literal>Resource</literal>, since all the <literal>Property</literal> characteristics are defined in the mapping definition, as well as auto conversion from different objects, and the ability to define new ones. Note that the <literal>resource-property</literal> definition will only work with the mentioned addProperty method, and no other addProperty method.
      </para>
      
      <para>
        Here is an example of how <literal>resource-property</literal> mappings can simplify Resource construction code:
<programlisting><![CDATA[ResourceFactory resourceFactory = compass.getResourceFactory();
Resource r = resourceFactory.createResource("c");
r.addProperty("id", 1);
r.addProperty("value1", "this is a sample value");
r.addProperty("value5", new Date()); // will use the my-date converter (using the format defined there)
session.save(r);]]></programlisting>
      </para>

      <para>
          All XML mappings should declare the doctype shown. The actual DTD may be found at the URL above or in the compass core distribution. Compass will always look for the DTD in the classpath first.
      </para>

      <para>
          There are no <literal>compass-core-mapping</literal> attributes that are applicable when working with resource mappings.
      </para>

      <sect2 id="resource">
        <title>resource</title>

        <para>
          You may declare a resource mapping using the <literal>resource</literal> element:

<programlisting><![CDATA[<resource
      alias="aliasName"
      sub-index="sub index name"
      extends="a comma separated list of aliases to extend"
      analyzer="name of the analyzer"
/>
    all?,
    sub-index-hash?,
    resource-id*,
    (resource-analyzer?),
    (resource-boost?),
    (resource-property)*
]]></programlisting>

          <table>
            <tgroup cols="2">
              <colspec colname="c1" colwidth="3*" />
              <colspec colname="c2" colwidth="5*" />
              <thead>
                <row>
                  <entry>Attribute</entry><entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>alias</entry>
                  <entry>The name of the alias that represents the <literal>Resource</literal>.</entry>
                </row>
                <row>
                  <entry>sub-index (optional, defaults to the <literal>alias</literal> value)</entry>
                  <entry>The name of the sub-index that the alias will map to.</entry>
                </row>
                <row>
                  <entry>extends (optional)</entry>
                  <entry>A comma separated list of aliases to extend. Can extend a <literal>resource</literal> mapping or a <literal>resource-contract</literal> mapping. Note that can extend more than one <literal>resource/resource-contract</literal></entry> mapping.
                </row>
                <row>
                  <entry>analyzer (optional, defaults to the <literal>default</literal> analyzer)</entry>
                  <entry>The name of the analyzer that will be used to analyze <literal>ANALYZED</literal> properties. Defaults to the <literal>default</literal> analyzer which is one of the internal analyzers that comes with Compass. Note, that when using the <literal>resource-analyzer</literal> mapping (a child mapping of resource mapping) (for a resource property value that controls the analyzer), the analyzer attribute will have no effects.</entry>
                </row>
              </tbody>
            </tgroup>
        </table>

    </para>

  </sect2>

        <sect2 id="resource-contract">
          <title>resource-contract</title>

          <para>
            You may declare a resource mapping contract using the <literal>resource-contract</literal> element:

  <programlisting><![CDATA[<resource-contract
        alias="aliasName"
        extends="a comma separated list of aliases to extend"
        analyzer="name of the analyzer"
  />
      resource-id*,
      (resource-analyzer?),
      (resource-property)*
  ]]></programlisting>

            <table>
              <tgroup cols="2">
                <colspec colname="c1" colwidth="3*" />
                <colspec colname="c2" colwidth="5*" />
                <thead>
                  <row>
                    <entry>Attribute</entry><entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>alias</entry>
                    <entry>The name of the alias that represents the <literal>Resource</literal>.</entry>
                  </row>
                  <row>
                    <entry>extends (optional)</entry>
                    <entry>A comma separated list of aliases to extend. Can extend a <literal>resource</literal> mapping or a <literal>resource-contract</literal> mapping. Note that can extend more than one <literal>resource/resource-contract</literal></entry> mapping.
                  </row>
                  <row>
                    <entry>analyzer (optional, defaults to the <literal>default</literal> analyzer)</entry>
                    <entry>The name of the analyzer that will be used to analyze <literal>ANALYZED</literal> properties. Defaults to the <literal>default</literal> analyzer which is one of the internal analyzers that comes with Compass. Note, that when using the <literal>resource-analyzer</literal> mapping (a child mapping of resource mapping) (for a resource property value that controls the analyzer), the analyzer attribute will have no effects.</entry>
                  </row>
                </tbody>
              </tgroup>
          </table>

      </para>

    </sect2>

  <sect2 id="resource-id">
      <title>resource-id</title>

   <para>
     Mapped <literal>Resource's</literal> must declare at least one <literal>resource-id</literal>. The <literal>resource-id</literal> element defines the <literal>Property</literal> that identifies the <literal>Resource</literal> for the specified alias.

<programlisting><![CDATA[<resource-id
      name="idName"
/>
]]></programlisting>

        <table>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row>
                <entry>Attribute</entry><entry>Description</entry>
              </row>
            </thead>
            <tbody>
             <row>
                <entry>name</entry>
                <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data) that is the id of the <literal>Resource</literal>.</entry>
              </row>
            </tbody>
         </tgroup>
        </table>

      </para>

    </sect2>

    <sect2 id="resource-property">
      <title>resource-property</title>

      <para>
        Declaring and using the <literal>resource-property</literal> element.

 <programlisting><![CDATA[<resource-property
      name="property name"
      store="yes|no|compress"
      index="analyzed|not_analyzed|no"
      boost="boost value for the property"
      analyzer="name of the analyzer"
      reverse="no|reader|string"
      override="true|false"
      exclude-from-all="no|yes|no_analyzed"
      converter="converter lookup name"
>
</resource-property>]]></programlisting>

        <table><tgroup cols="2">
          <colspec colname="c1" colwidth="3*" />
          <colspec colname="c2" colwidth="5*" />
          <thead>
            <row><entry>Attribute</entry><entry>Description</entry></row>
          </thead>
          <tbody>
            <row>
              <entry>name</entry>
              <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data).</entry>
            </row>
            <row>
              <entry>store (optional, defaults to <literal>yes</literal>)</entry>
              <entry>If the value of the resource property is going to be stored in the index.</entry>
            </row>
            <row>
              <entry>index (optional, defaults to <literal>analyzed</literal>)</entry>
              <entry>If the value of the resource property is going to be indexed (searchable). If it does, than controls if the value is going to be broken down and analyzed (<literal>analyzed</literal>), or is going to be used as is (<literal>not_analyzed</literal>).</entry>
            </row>
            <row>
              <entry>boost (optional, defaults to <literal>1.0f</literal>)</entry>
              <entry>Controls the boost level for the resource property.</entry>
            </row>
            <row>
              <entry>analyzer (optional, defaults to the resource mapping analyzer decision scheme)</entry>
              <entry>The name of the analyzer that will be used to analyze <literal>ANALYZED</literal> resource property mappings defined for the given property. Defaults to the resource mapping analyzer decision scheme based on the analyzer set, or the <literal>resource-analyzer</literal> mapping.</entry>.
            </row>
            <row>
              <entry>exclude-from-all (optional, default to <literal>false</literal>)</entry>
              <entry>Excludes the property from participating in the "all" meta-data. If set to <literal>no_analyzed</literal>, <literal>not_analyzed</literal> properties will be analyzed when added to the all property (the analyzer can be controlled using the analyzer attribute).</entry>
            </row>
            <row>
              <entry>override (optional, defaults to <literal>true</literal>)</entry>
              <entry>If there is another definition with the same mapping name, if it will be overridden or added as additional mapping. Mainly used to override definitions made in extended mappings.</entry>
            </row>
            <row>
              <entry>reverse (optional, defaults to <literal>no</literal>)</entry>
              <entry>The meta-data will have it's value reversed. Can have the values of <literal>no</literal> - no reverse will happen, <literal>string</literal> - the reverse will happen and the value stored will be a reversed string, and <literal>reader</literal> - a special reader will wrap the string and reverse it. The <literal>reader</literal> option is more performant, but the <literal>store</literal> and <literal>index</literal> settings will be discarded.</entry>
            </row>
            <row>
                <entry>converter (optional)</entry>
                <entry>The global converter lookup name registered with the configuration.</entry>
            </row>
          </tbody>
        </tgroup></table>

        <para>
          Defines the characteristics of a <literal>Resource</literal> <literal>Property</literal> identified by the <literal>name</literal> mapping. The definition only applies when using the <literal>Resource#addProperty(String name, Object value)</literal> operation, and the operation can only be used with the <literal>resourcde-property</literal> mapping.
        </para>

        <para>
          Note that other <literal>Resource</literal> <literal>Property</literal> can be added that are not defined in the resource mapping using the <literal>createProperty</literal> operation.
        </para>

      </para>

    </sect2>

    <sect2 id="resource-analyzer">
      <title>resource-analyzer</title>

      <para>
        Declaring an analyzer controller property using the <literal>resource-analyzer</literal> element.

<programlisting><![CDATA[<resource-analyzer
      name="property name"
      null-analyzer="analyzer name if value is null"
      converter="converter lookup name"
>
</resource-analyzer>]]></programlisting>

        <table>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row><entry>Attribute</entry><entry>Description</entry></row>
            </thead>
            <tbody>
              <row>
                <entry>name</entry>
                <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data).</entry>
              </row>
              <row>
                <entry>null-analyzer (optional, defaults to error in case of a <literal>null</literal> value)</entry>
                <entry>The name of the analyzer that will be used if the property has the <literal>null</literal> value.</entry>
              </row>
              <row>
                  <entry>converter (optional)</entry>
                  <entry>The global converter lookup name registered with the configuration.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          The analyzer resource property mapping, controls the analyzer that will be used when indexing the <literal>Resource</literal>. If the mapping is defined, it will override the resource mapping analyzer attribute setting.
        </para>

        <para>
          If, for example, Compass is configured to have two additional analyzers, called <literal>an1</literal> (and have settings in the form of <literal>compass.engine.analyzer.an1.*</literal>), and another called <literal>an2</literal>. The values that the resource property can hold are: <literal>default</literal> (which is an internal Compass analyzer, that can be configured as well), <literal>an1</literal> and <literal>an2</literal>. If the analyzer will have a <literal>null</literal> value, and it is applicable with the application, a <literal>null-analyzer</literal> can be configured that will be used in that case. If the resource property has a value, but there is not matching analyzer, an exception will be thrown.
        </para>

      </para>

    </sect2>

        <sect2 id="resource-boost">
          <title>resource-boost</title>

          <para>
            Declaring a dynamic property to control the resource boost value using the <literal>resource-boost</literal> element.

<programlisting><![CDATA[<resource-boost
      name="property name"
      default="the boost default value when no property value is present"
      converter="converter lookup name"
>
</resource-boost>]]></programlisting>

            <table>
              <tgroup cols="2">
                <colspec colname="c1" colwidth="3*" />
                <colspec colname="c2" colwidth="5*" />
                <thead>
                  <row><entry>Attribute</entry><entry>Description</entry></row>
                </thead>
                <tbody>
                  <row>
                    <entry>name</entry>
                    <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data).</entry>
                  </row>
                  <row>
                    <entry>default (optional, defaults to <literal>1.0</literal>)</entry>
                    <entry>The default value if the property has a null value.</entry>
                  </row>
                  <row>
                      <entry>converter (optional)</entry>
                      <entry>The global converter lookup name registered with the configuration.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>
              The boost resource property mapping, controls the boost associated with the Resource created based on the mapped property. The value of the property should be allowed to be converted to float.
            </para>

          </para>

        </sect2>

  </sect1>

</chapter>
