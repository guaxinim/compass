<chapter id="core-connection">
  <title>Connection</title>
  
  <sidebar>
    <title>Lucene Directory</title>
    <para>
      Lucene comes with a <classname>Directory</classname> abstraction on top of the actual index storage. Compass uses Lucene built in different directories implementations, as well as have custom implementations built on top of it.
    </para>
  </sidebar>
  
  <para>
    The only required configuration for a <classname>Compass</classname> instance (using the <classname>CompassConfiguration</classname>) is its connection. The connection controls where the index will be saved, or in other words, the storage location of the index. This chapter will review the different options of index storage that comes with Compass, and try to expand on some of important aspects when using a certain storage (like clustering support).
  </para>
  
  <sect1 id="core-connection-file">
    <title>File System Store</title>
    
    <para>
      By far the most popular and simple of all storage options is storing the index on the file system. Here is an example of a simple file system based connection configuration that stores the index in the <literal>target/test-index</literal> path:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <file path="target/test-index"/>
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=file://target/test-index
]]></programlisting>
    </para>

    <para>
      Another option for file system based configuration is using Java 1.4 NIO mmap feature. The NIO should perform better under certain environment/load then the default file based one. We recommend performing some performance tests (preferable as close to your production system configuration as possible), and check which one performs better. Here is an example of a simple file system based connection configuration that stores the index in the <literal>target/test-index</literal> path:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <mmap path="target/test-index"/>
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=mmap://target/test-index
]]></programlisting>
    </para>

      <para>
        Yet Another option for file system based configuration is using Java 1.4 NIO feature. The NIO should perform better under certain environment/load then the default file based one (especially under heavily concurrent systems). We recommend performing some performance tests (preferable as close to your production system configuration as possible), and check which one performs better. Note, there are known problems when using this under windows operating system due to a SUN JVM bug. Here is an example of a simple file system based connection configuration that stores the index in the <literal>target/test-index</literal> path:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <niofs path="target/test-index"/>
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=niofs://target/test-index
]]></programlisting>
      </para>
    
    <para>
      When using file system based index storage, locking (for transaction support) is done using lock files. The existence of the file means a certain sub index is locked. The default lock file directory is <literal>java.io.tmp</literal> system property.
    </para>
    
    <para>
      Clustering support for file system based storage usually means sharing the file system between different machines (running different Compass instances). Current locking mechanism will require to set the locking directory on the shared file system, see the LockFactory section for more information.
    </para>
    
    <para>
      Another important note regarding using a shared file system based index storage is not to use NFS. For best performance, a <ulink url="http://en.wikipedia.org/wiki/Storage_area_network">SAN</ulink> based solution is recommended.
    </para>
    
  </sect1>

  <sect1 id="core-connection-ram">
    <title>RAM Store</title>
    
    <para>
      Using the RAM based index store, the index data can be stored in memory. This is usable for fast indexing and searching, on the expense of no long lived storage. Here is an example of how it can be configured:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <ram path="/index"/>
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=ram://index
]]></programlisting>
    </para>
  </sect1>

  <sect1 id="core-connection-jdbc">
    <title>Jdbc Store</title>
    
    <para>
      The Jdbc store connection type allows the index data to be stored within a database. The schema used for storing the index actually simulates a file system based tree, with each row in a sub index table representing a "file" with its binary data.
    </para>
    
    <para>
      Compass implementation, <classname>JdbcDirectory</classname>, which is built on top of Lucene <classname>Directory</classname> abstraction is completely decoupled from the rest of Compass, and can be used with pure Lucene applications. For more information, please read <xref linkend="jdbcdirectory"/>. Naturally, when using it within Compass it allows for simpler configuration, especially in terms of transaction management and Jdbc <classname>DataSource</classname> management.
    </para>
    
    <para>
      Here is a simple example of using Jdbc to store the index. The example configuration assumes a standalone configuration, with no data source pooling.
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
          <dataSourceProvider>
              <driverManager  url="jdbc:hsqldb:mem:test" 
                              username="sa" password=""
                              driverClass="org.hsqldb.jdbcDriver" />
          </dataSourceProvider>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
    </para>
    
    <para>
      The above configuration does not define a dialect attribute on the jdbc element. Compass will try to auto-detect the database dialect based on the database meta-data. If it fails to find one, a dialect can be set, in our case it should be <literal>dialect="org.apache.lucene.store.jdbc.dialect.HSQLDialect"</literal>.
    </para>
    
    <sect2 id="core-connection-jdbc-managed">
      <title>Managed Environment</title>
      
      <para>
        It is important to understand if Compass is working within a "managed" environment or not when it comes to a Jdbc index storage. A managed environment is an environment where Compass is not in control of the transaction management (in case of configuring Compass with JTA or Spring transaction management). If Compass is in control of the transaction, i.e. using Local transaction factory, it is not considered a managed environment.
      </para>
      
      <para>
        When working in a non managed environment, Compass will wrap the data source with a <classname>TransactionAwareDataSourceProxy</classname>, and will commit/rollback the Jdbc connection. When working within a managed environment, no wrapping will be performed, and Compass will let the external transaction manager to commit/rollback the connection.
      </para>
      
      <para>
        Usually, but not always, when working in a managed environment, the Jdbc data source used will be from an external system/configuration. Most of the times it will either be JNDI or external data source provider (like Spring). For more information about different data source providers, read the next section.
      </para>
      
      <para>
        By default, Compass works as if within a non managed environment. The <literal>managed</literal> attribute on the <literal>jdbc</literal> element should be set to <literal>true</literal> otherwise.
      </para>
    </sect2>
    
    <sect2 id="core-connection-jdbc-datasourceprovider">
      <title>Data Source Provider</title>
      
      <para>
        Compass allows for different Jdbc <classname>DataSource</classname> providers. A <classname>DataSourceProvider</classname> implementation is responsible for configuring and providing a Jdbc <classname>DataSource</classname> instance. A data source implementation is very important when it comes to performance, especially in terms of pooling features.
      </para>
      
      <para>
        All different data source supported by Compass allow to configure the autoCommit flag. There are three values allowed for autoCommit: <literal>false</literal>, <literal>true</literal> and <literal>external</literal> (don't set the autoCommit explicitly, assume it is configured elsewhere). The autoCommit mode defaults to <literal>false</literal> and it is the recommended value (external can also be used, but make sure to set the actual data source to false).
      </para>
      
      <sect3 id="core-connection-jdbc-dsp-driverManager">
        <title>Driver Manager</title>
        
        <para>
          The simplest of all providers. Does not requires any external libraries or systems. Main drawback is performance, since it performs no pooling of any kind. The first sample of a Jdbc configuration earlier in this chapter used the driver manager as a data source provider.
        </para>
      </sect3>

      <sect3 id="core-connection-jdbc-dsp-dbcp">
        <title>Jakarta Commons DBCP</title>
        
        <para>
          Compass can be configured to use <ulink url="http://jakarta.apache.org/commons/dbcp/">Jakarta Commons DBCP</ulink> as a data source provider. It is the preferred option than the driver manager provider for performance reasons (it is up to you if you want to use it or <ulink url="http://sourceforge.net/projects/c3p0">c3p0</ulink> explained later in this section). Here is an example of using it:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
            <dbcp url="jdbc:hsqldb:mem:test" 
                  username="sa" password=""
                  driverClass="org.hsqldb.jdbcDriver"
                  maxActive="10" maxWait="5" maxIdle="2" initialSize="3" minIdle="4"
                  poolPreparedStatements="true" />
        </dataSourceProvider>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
        </para>
        <para>
          The configuration shows the different settings that can be used on the dbcp data source provider. They are, by no means, the recommended values for a typical system. For more information, please consult <ulink url="http://jakarta.apache.org/commons/dbcp/">Jakarta Commons DBCP</ulink> documentation.
        </para>
      </sect3>
      
      <sect3 id="core-connection-jdbc-dsp-c3p0">
        <title>c3p0</title>
        
        <para>
          Compass can be configured using <ulink url="http://sourceforge.net/projects/c3p0">c3p0</ulink> as a data source provider. It is the preferred option than the driver manager provider for performance reasons (it is up to you if you want to use it or <ulink url="http://jakarta.apache.org/commons/dbcp/">Jakarta Commons DBCP</ulink> explained previously in this section). Here is an example of using it:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
          <c3p0 url="jdbc:hsqldb:mem:test" 
                username="testusername" password="testpassword" 
                driverClass="org.hsqldb.jdbcDriver" />
        </dataSourceProvider>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
        </para>
        <para>
          The c3p0 data source provider will use c3p0 <classname>ComboPooledDataSource</classname>, with additional settings can be set by using c3p0.properties stored as a top-level resource in the same CLASSPATH / classloader that loads c3p0's jar file. Please consult the c3p0 documentation for additional settings.
        </para>
      </sect3>
      
      <sect3 id="core-connection-jdbc-dsp-jndi">
        <title>JNDI</title>
        
        <para>
          Compass can be configured to look up the data source using JNDI. Here is an example of using it:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
          <jndi lookup="testds" username="testusername" password="testpassword" />
        </dataSourceProvider>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
        </para>
        
        <para>
          The jndi lookup environment, including the <literal>java.naming.factory.initial</literal> and <literal>java.naming.provider.url</literal> JNDI settings, can be configured in the other :) <literal>jndi</literal> element, directly under the <literal>compass</literal> element. Note, the <literal>username</literal> and <literal>password</literal> are used for the <classname>DataSource</classname>, and are completely optional.
        </para>
      </sect3>

      <sect3 id="core-connection-jdbc-dsp-external">
        <title>External</title>

        <para>
          Compass can be configured to use an external data source using the <classname>ExteranlDataSourceProvider</classname>. It uses Java thread local to store the <classname>DataSource</classname> for later use by the data source provider. Setting the data source uses the static method <literal>setDataSource(DataSource dataSource)</literal> on <classname>ExteranlDataSourceProvider</classname>. Here is an example of how it can be configured:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
          <external username="testusername" password="testpassword"/>
        </dataSourceProvider>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
        </para>
        <para>
           Note, the <literal>username</literal> and <literal>password</literal> are used for the <classname>DataSource</classname>, and are completely optional.˙
        </para>
      </sect3>
    </sect2>
    
    <sect2 id="core-connection-jdbc-fe">
      <title>File Entry Handler</title>
      
      <para>
        Configuring the Jdbc store with Compass also allows defining <classname>FileEntryHandler</classname> settings for different file entries in the database. FileEntryHandlers are explained in <xref linkend="jdbcdirectory"/> (and require some Lucene knowledge). The Lucene Jdbc Directory implementation already comes with sensible defaults, but they can be changed using Compass configuration.
      </para>
      
      <para>
        One of the things that comes free with Compass is automatically using the more performant <classname>FetchPerTransactoinJdbcIndexInput</classname> if possible (based on the dialect). Special care need to be taken when using the mentioned index input, and it is done automatically by Compass.
      </para>
      
      <para>
        File entries configuration are associated with a name. The name can be either <literal>__default__</literal> which is used for all unmapped files, it can be the full name of the file stored, or the suffix of the file (the last 3 characters).
      </para>
      
      <para>
        Here is an example of the most common configuration of file entries, changing their buffer size for both index input (used for reading data) and index output (used for writing data):
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
          <external username="testusername" password="testpassword"/>
        </dataSourceProvider>
        
        <fileEntries>
            <fileEntry name="__default__">
                <indexInput bufferSize="4096" />
                <indexOutput bufferSize="4096" />
            </fileEntry>
        </fileEntries>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
      </para>
    </sect2>
    
    <sect2 id="core-connection-jdbc-ddl">
      <title>DDL</title>
      
      <para>
        Compass by default can create the database schema, and has defaults for the column names, types, sizes and so on. The schema definition is configurable as well, here is an example of how to configure it:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <jdbc>
        <dataSourceProvider>
          <external username="testusername" password="testpassword"/>
        </dataSourceProvider>

        <ddl>
            <nameColumn name="myname" length="70" />
            <sizeColumn name="mysize" />
        </ddl>
      </jdbc>
  </connection>
</compass>
]]></programlisting>
      </para>
      
      <para>
        Compass by default will drop the tables when deleting the index, and create them when creating the index. If performing schema based operations is not allowed, the <literal>disableSchemaOperations</literal> flag can be set to <literal>true</literal>. This will cause Compass not to perform any schema based operations.
      </para>
    </sect2>
    
  </sect1>

  <sect1 id="core-connection-lockFactory">
    <title>Lock Factory</title>
    
    <para>
        Lucene allows to use different <literal>LockFactory</literal> implementation controlling how locks are performed. By default, each directory comes with its own default lock, but overriding the lock factory can be done within Compass configuration. Here is an example of how this can be done:
    
<programlisting><![CDATA[<compass name="default">
  <connection>
      <file path="target/test-index" />
      <lockFactory type="nativefs" path="test/#subContext#/#subindex#" />
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=file://target/test-index
compass.engine.store.lockFactory.type=nativefs
compass.engine.store.lockFactory.path=test/#subContext#/#subindex#
]]></programlisting>
    </para>
    
    <para>
        The lock factory type can have the following values: <literal>simplefs</literal>, <literal>nativefs</literal> (both file system based locks), <literal>nolock</literal>, and <literal>singleinstance</literal>. A fully qualified class name of <literal>LockFactory</literal> implementation or <literal>LockFactoryProvider</literal> can also be provided. Note, when using the <literal>nativefs</literal> locks, it is recommended to specific a lock directory different than the index directory, especially when using Compass Gps.
    </para>
    
    <para>
        The path allows to provide path parameter to the file system based locks. This is an optional parameter and defaults to the sub index location. The specialized keyword <literal>#subindex#</literal> and <literal>#subContext#</literal> can be used to be replaced with the actual sub index and sub context.
    </para>
  </sect1>
  
  <sect1 id="core-connection-localcache">
    <title>Local Directory Cache</title>
    
    <para>
      Compass supports local directory cache implementation allowing to have a local cache per sub index or globally for all sub indexes (that do not have a local cache already specifically defined for them). Local cache can be really useful where a certain sub index is heavily accessed and a local in memory cache is required to improve its performance. Another example is using a local file system based cache when working with a Jdbc directory.
    </para>
    
    <para>
      Local Cache fully supports several Compass instances running against the same directory (unlike the directory wrappers explained in the next section) and keeps its local cache state synchronized with external changes periodically.
    </para>
    
    <para>
        There are several types of local cache implementations. The regular connection based types (<literal>ram://</literal> or <literal>file://</literal>) actually creates a full replica of the directory it is built on. The <literal>memory://</literal> based one will keep an evictable memory based local cache. The memory based local cache accepts a <literal>size</literal> parameter that controls the maximum memory size that will be used before things will start to be evicted (defaults to <literal>64m</literal>). It also accepts the <literal>bucketSize</literal> parameter that controls the size of each cache entry (defaults to <literal>1024</literal> bytes). Note, the configuration applies to each sub index separately.
    </para>
    
    <para>
      Here is an example configuring a ram based local cache for sub index called a:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <file path="target/test-index" />
      <localCache subIndex="a" connection="ram://" />
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=target/test-index
compass.engine.localCache.a.connection=ram://
]]></programlisting>
    </para>
    
    <para>
      And here is an example of how it can be configured to use local file system cache for all different sub indexes (using the special <literal>__default__</literal> keyword):
<programlisting><![CDATA[<compass name="default">
  <connection>
      <file path="target/test-index" />
      <localCache subIndex="__default__" connection="file://tmp/cache" />
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=target/test-index
compass.engine.localCache.__default__.connection=file://tmp/cache
]]></programlisting>
    </para>
    
    <para>
        Last, here is an example of the memory based evictable local cache:
<programlisting><![CDATA[<compass name="default">
  <connection>
      <file path="target/test-index" />
      <localCache subIndex="__default__" connection="memory://size=128m&bucketSize=2k" />
  </connection>
</compass>
]]></programlisting>
<programlisting><![CDATA[compass.engine.connection=target/test-index
compass.engine.localCache.__default__.connection=memory://size=128m&bucketSize=2k
]]></programlisting>
    </para>
    
    <para>
      Other than using a faster local cache directory implementation, Compass also improve compound file structure performance by performing the compound operation on the local cache and only flushing the already compound index structure.
    </para>
  </sect1>
  
  <sect1 id="core-connection-directoryWrapper">
    <title>Lucene Directory Wrapper</title>
    
    <para>
      All the different connection options end up as an instance of a Lucene <classname>Directory</classname> per sub index. Compass provides the ability to wrap the actual <classname>Directory</classname> (think of it as a <classname>Directory</classname> aspect). In order to configure a wrapper, <classname>DirectoryWrapperProvider</classname> implementation must be provided. The <classname>DirectoryWrapperProvider</classname> implementation must implement <literal>Directory wrap(String subIndex, Directory dir)</literal>, which accepts the actual directory and the sub index it is associated with, and return a wrapped <classname>Directory</classname> implementation.
    </para>
    
    <para>
      Compass comes with several built in directory wrappers:
    </para>
    
    <sect2 id="core-connection-dw-syncmemorymirror">
      <title>SyncMemoryMirrorDirectoryWrapperProvider</title>
      
      <para>
        Wraps the given Lucene directory with <classname>SyncMemoryMirrorDirectoryWrapper</classname> (which is also provided by Compass). The wrapper wraps the directory with an in memory directory which mirrors it synchronously.
      </para>
      
      <para>
        The original directory is read into memory when the wrapper is constructed. All read related operations are performed against the in memory directory. All write related operations are performed both against the in memory directory and the original directory. Locking is performed using the in memory directory.
      </para>
      
      <para>
        The wrapper will allow for the performance gains that comes with an in memory index (for read/search operations), while still maintaining a synchronized actual directory which usually uses a more persistent store than memory (i.e. file system).
      </para>
      
      <para>
        This wrapper will only work in cases when either the index is read only (i.e. only search operations are performed against it), or when there is a single instance which updates the directory.
      </para>
      
      <para>
        Here is an example of how to configure a directory wrapper:
<programlisting><![CDATA[<compass name="default">
  <connection>
    <file path="target/test-index"/>
    <directoryWrapperProvider name="test"
      type="org.compass.core.lucene.engine.store.wrapper.SyncMemoryMirrorDirectoryWrapperProvider">
    </directoryWrapperProvider>
  </connection>
</compass>
]]></programlisting>
      </para>
    </sect2>  
    
    <sect2 id="core-connection-dw-asyncmemorymirror">
      <title>AsyncMemoryMirrorDirectoryWrapperProvider</title>
      
      <para>
        Wraps the given Lucene directory with <classname>AsyncMemoryMirrorDirectoryWrapper</classname> (which is also provided by Compass). The wrapper wraps the directory with an in memory directory which mirrors it asynchronously.
      </para>
      
      <para>
        The original directory is read into memory when the wrapper is constructed. All read related operations are performed against the in memory directory. All write related operations are performed against the in memory directory and are scheduled to be performed against the original directory (in a separate thread). Locking is performed using the in memory directory.
      </para>
      
      <para>
        The wrapper will allow for the performance gains that comes with an in memory index (for read/search operations), while still maintaining an asynchronous actual directory which usually uses a more persistent store than memory (i.e. file system).
      </para>
      
      <para>
        This wrapper will only work in cases when either the index is read only (i.e. only search operations are performed against it), or when there is a single instance which updates the directory.
      </para>
      
      <para>
        Here is an example of how to configure a directory wrapper:
<programlisting><![CDATA[<compass name="default">
  <connection>
    <file path="target/test-index"/>
    <directoryWrapperProvider name="test"
      type="org.compass.core.lucene.engine.store.wrapper.AsyncMemoryMirrorDirectoryWrapperProvider">
      <setting name="awaitTermination">10</setting>
      <setting name="sharedThread">true</setting>
    </directoryWrapperProvider>
  </connection>
</compass>
]]></programlisting>
      </para>
      
      <para>
        <literal>awaitTermination</literal> controls how long the wrapper will wait for the async write tasks to finish. When closing Compass, there might be still async tasks pending to be written to the actual directory, and the setting control how long (in seconds) Compass will wait for tasks to be executed against the actual directory. <literal>sharedThread</literal> set to <literal>false</literal> controls if each sub index will have its own thread to perform pending "write" operations. If it is set to <literal>true</literal>, a single thread will be shared among all the sub indexes.
      </para>  
      
    </sect2>
  </sect1>
  
</chapter>