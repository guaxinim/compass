<?xml version="1.0"?>

<!--
  Build file for the Compass.
-->

<project name="compass" default="usage" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <property name="maven.dist.dir" location="${basedir}/target/maven"/>
    <property name="m2.repository.url" value="file://${maven.dist.dir}"/>
    <property name="m2.repository.private.key" value="${user.home}/.ssh/id_dsa"/>

    <property file="project.properties"/>
    <property file="build.properties"/>

    <tstamp>
        <format property="daystamp" pattern="yyyyMMdd"/>
        <format property="timestamp" pattern="yyyyMMdd HH:mm"/>
    </tstamp>

    <path id="all-libs">

        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="ant/*.jar"/>
        </fileset>

    </path>

    <path id="compile-libs">

        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

    </path>

    <condition property="coherence.exists">
        <and>
            <available file="${lib.dir}/coherence/tangosol.jar"/>
        </and>
    </condition>

    <available
            property="maven.ant.tasks.present"
            classname="org.apache.maven.artifact.ant.Pom"
            />

    <target name="usage">

        <echo message=""/>
        <echo message="Compass build script"/>
        <echo message="-----------------------------------------"/>
        <echo message=""/>
        <echo message="Among the available targets are:"/>
        <echo message=""/>
        <echo message="build    --> build all; don't create JARs"/>
        <echo message="alljars  --> create all JAR files"/>
        <echo message="tests    --> run tests"/>
        <echo message="release  --> create a release"/>
        <echo message=""/>

    </target>

    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">

        <delete dir="${target.classes.dir}"/>
        <delete dir="${target.testclasses.dir}"/>
        <delete dir="${target.junit.reports.dir}"/>
        <delete dir="${target.junit.summary.dir}"/>
        <delete dir="${target.release.dir}"/>
        <delete dir="${target.otherclasses.dir}"/>

        <!-- Just kill target dir (it's safer). No need at this point to keep it. -->
        <delete dir="${target.dir}"/>

        <delete dir="${dist.dir}"/>
        <delete dir="${javadoc.dir}"/>
        <delete dir="${reference.dir}/html"/>
        <delete dir="${reference.dir}/html_single"/>
        <delete dir="${reference.dir}/pdf"/>

        <ant antfile="${samples.dir}/library/build.xml" target="clean" dir="${samples.dir}/library/"
             inheritall="false"/>
        <ant antfile="${samples.dir}/petclinic/build.xml" target="clean" dir="${samples.dir}/petclinic/"
             inheritall="false"/>

    </target>


    <!--
         Compile the main source tree.
         This task depends on the Commons Attributes compile step,
         as some classes must ship with attributes.
     -->
    <target name="buildmain" description="Compile main source tree java files into class files">

        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.classes.dir}/META-INF"/>

        <javac destdir="${target.classes.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true" excludes="**/coherence/**">
            <src path="${main.src.dir}"/>
            <classpath refid="compile-libs"/>
        </javac>

        <antcall target="buildcoherence"/>

        <copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${main.src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.handlers"/>
                <include name="**/*.schemas"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xsd"/>
                <include name="**/*.json"/>
                <include name="META-INF/**"/>
            </fileset>
        </copy>

    </target>

    <target name="buildcoherence" description="Compiles coherence code if jars exists" if="coherence.exists">
        <javac destdir="${target.classes.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true" includes="**/coherence/**">
            <src path="${main.src.dir}"/>
            <classpath refid="compile-libs"/>
        </javac>
    </target>


    <!--
         Compile the main, JDK 1.5, and AspectJ sources.
     -->
    <target name="build" depends="buildmain" description="Compile main"/>


    <target name="initdist" description="Initialize the distribution directory">

        <mkdir dir="${dist.dir}"/>

    </target>

    <target name="fulljar" depends="build,initdist" description="Create full JAR file with all Compass classes">

        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${basedir}/lib/jarjar/jarjar-1.0.jar"/>

        <delete file="${dist.dir}/${compass-jarname}.jar"/>
        <jarjar jarfile="${dist.dir}/${compass-jarname}.jar" basedir="${target.classes.dir}" includes="META-INF/**,org/apache/lucene/**,org/compass/**,org/springframework/**,**/*.xml">
            <zipfileset src="${basedir}/lib//asm/asm-3.1.jar" />
            <zipfileset src="${basedir}/lib//asm/asm-commons-3.1.jar" />
            <rule pattern="org.objectweb.asm.**" result="org.compass.core.asm.@1"/>
            <manifest>
                <attribute name="Implementation-Title" value="${compass-title}"/>
                <attribute name="Implementation-Version" value="${compass-manifest-version}"/>
                <attribute name="Compass-Version" value="${compass-manifest-version}"/>
                <attribute name="Compass-Date" value="${timestamp}"/>
                <attribute name="Bundle-Category" value="compass"/>
                <attribute name="Bundle-Copyright" value="Compass"/>
                <attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Name" value="Compass"/>
                <attribute name="Bundle-SymbolicName" value="org.compass-project.compass"/>
                <attribute name="Bundle-Version" value="${compass-manifest-version}"/>
            </manifest>
        </jarjar>
    </target>

    <target name="fulljar14" depends="fulljar" description="Creates a full 1.4 JAR file">
        <taskdef name="retrotranslator" classname="net.sf.retrotranslator.transformer.RetrotranslatorTask">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="retrotranslator/**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <delete file="${dist.dir}/${compass-jarname14}.jar"/>
        <retrotranslator target="1.4" srcjar="${dist.dir}/${compass-jarname}.jar"
                         destjar="${dist.dir}/${compass-jarname14}.jar"
                         verify="false" failonwarning="false" embed="org.compass.retrotranslator">
            <classpath refid="compile-libs"/>
        </retrotranslator>
    </target>


    <target name="srczip" depends="initdist" description="Create source ZIP (containing Java sources)">

        <delete file="${dist.dir}/${compass-jarname}-src.jar"/>

        <jar destfile="${dist.dir}/${compass-jarname}-src.jar">
            <fileset dir="${main.src.dir}">
                <include name="org/apache/lucene/**"/>
                <include name="org/compass/**"/>
            </fileset>
        </jar>

    </target>


    <target name="distfiles" depends="initdist" description="Copy dtd, tld and co to dist directory">

        <copy file="${main.src.dir}/org/compass/core/compass-core-configuration-2.2.dtd"
              todir="${dist.dir}/dtd" preservelastmodified="true"/>

        <copy file="${main.src.dir}/org/compass/core/compass-core-mapping-2.2.dtd"
              todir="${dist.dir}/dtd" preservelastmodified="true"/>

        <copy file="${main.src.dir}/org/compass/core/compass-core-meta-data-2.2.dtd"
              todir="${dist.dir}/dtd" preservelastmodified="true"/>

        <copy file="${main.src.dir}/org/compass/core/compass-core-config-2.2.xsd"
              todir="${dist.dir}/schema" preservelastmodified="true"/>

        <copy file="${main.src.dir}/org/compass/spring/config/spring-compass-core-config-2.2.xsd"
              todir="${dist.dir}/schema" preservelastmodified="true"/>

        <copy todir="${dist.dir}/lucene">
            <fileset dir="${lib.dir}/lucene"/>
        </copy>

        <copy file="${lib.dir}/jakarta-commons/commons-logging.jar" todir="${dist.dir}"/>
    </target>


    <target name="alljars" depends="fulljar,fulljar14,srczip" description="Create all JAR files"/>


    <!--
         Convenience targets, needed for the automated build process. Convenience targets are
         made up of the individual targets called, separated by an underscore.
     -->
    <target name="clean_alljars" depends="clean, alljars"/>


    <!--
         Generate javadoc for the main and JDK 1.5 sources.
     -->
    <target name="javadoc" description="Generate framework Javadocs">

        <delete dir="${javadoc.dir}"/>
        <mkdir dir="${javadoc.dir}"/>

        <javadoc sourcepath="${main.src.dir}" destdir="${javadoc.dir}" windowtitle="Compass" breakiterator="true"
                 source="1.5" access="package" author="true" version="true" use="true" defaultexcludes="true"
                 stylesheetfile="${docs.dir}/javadoc/jdstyle.css" maxmemory="512m">
            <doctitle><![CDATA[<h1>Compass</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright (c) 2004-2009 The Compass Project.</i>]]></bottom>
            <classpath refid="all-libs"/>
            <packageset dir="${main.src.dir}">
                <include name="org/apache/lucene/**"/>
                <include name="org/compass/**"/>
                <exclude name="org/compass/core/util/asm/**" />
            </packageset>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <link href="http://lucene.apache.org/java/2_4_0/api//"/>
            <link href="http://www.junit.org/junit/javadoc/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
            <link href="http://www.hibernate.org/hib_docs/annotations/api/"/>
            <link href="http://www.hibernate.org/hib_docs/entitymanager/api/"/>
            <link href="http://www.dom4j.org/apidocs/"/>
        </javadoc>

        <delete file="${dist.dir}/${compass-jarname}-javadoc.jar"/>

        <jar destfile="${dist.dir}/${compass-jarname}-javadoc.jar" basedir="${javadoc.dir}"/>
    </target>


    <!--
         Compile the main test tree.
     -->
    <target name="buildmaintests" depends="build"
            description="Compile test source tree java files into class files">

        <mkdir dir="${target.testclasses.dir}"/>

        <javac destdir="${target.testclasses.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true" excludes="**/coherence/**">
            <src path="${main.test.dir}"/>
            <classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
        </javac>

        <antcall target="buildcoherencetests"/>

        <!-- Pick up config files from test directory -->
        <copy todir="${target.testclasses.dir}" preservelastmodified="true">
            <fileset dir="${main.test.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.jdo"/>
                <include name="**/*.json"/>
            </fileset>
        </copy>

    </target>

    <target name="buildcoherencetests"
            description="Compile coherence test source tree java files into class files" if="coherence.exists">

        <javac destdir="${target.testclasses.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true" includes="**/coherence/**">
            <src path="${main.test.dir}"/>
            <classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
        </javac>
    </target>

    <target name="buildtests" depends="buildmaintests" description="Compile main test sources"/>


    <target name="maintests" depends="buildtests" description="Run main tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="yes" haltonerror="yes">

            <jvmarg line="-Djava.awt.headless=true -Xmx768m -XX:MaxPermSize=128m"/>
            <jvmarg line="-Dcompass.test.validateFileHandler=false"/>
            <!--<jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>

            <classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

    </target>

    <target name="maven.ant.tasks-check">
        <fail unless="maven.ant.tasks.present">
            ##################################################################
            Maven ant tasks not found.
            Please make sure the maven-ant-tasks jar is in ANT_HOME/lib, or made
            available to Ant using other mechanisms like -lib or CLASSPATH.
            ##################################################################
        </fail>
    </target>


    <target name="mvn" depends="maven.ant.tasks-check, fulljar, srczip, javadoc">
        <mkdir dir="${maven.dist.dir}" />

        <copy file="pom.xml.template" tofile="${basedir}/target/pom.xml">
            <filterset begintoken="@" endtoken="@">
                <filter token="version" value="${compass-version}"/>
            </filterset>
        </copy>
        <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>

        <artifact:pom id="maven.project" file="${basedir}/target/pom.xml"/>

        <mkdir dir="${basedir}/target/maven"/>

        <artifact:deploy file="${dist.dir}/${compass-jarname}.jar">
            <pom refid="maven.project"/>
            <attach file="${dist.dir}/${compass-jarname}-src.jar" classifier="sources"/>
            <attach file="${dist.dir}/${compass-jarname}-javadoc.jar" classifier="javadoc"/>
            <remoteRepository url="${m2.repository.url}">
                <authentication username="${m2.repository.username}" privateKey="${m2.repository.private.key}"/>
            </remoteRepository>
        </artifact:deploy>
    </target>

    <!--
         Run test suite. However it's possible to run specific tests by passing in
         the "test.includes" and (optionally) "test.excludes" properties through the
         command line, as below:
             ant tests -Dtest.includes=org/compass/core/**/*Tests
     -->
    <target name="tests" depends="maintests" description="Run tests"/>


    <!--
         Run test suite and generate test summary, for both main and tiger tests.
         Does not halt on failure or error, in contrast to the "tests" target above.
     -->
    <target name="testsummary" depends="buildtests" description="Run tests and generate test summary">

        <mkdir dir="${target.junit.reports.dir}"/>
        <mkdir dir="${target.junit.summary.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="no" haltonerror="no">

            <jvmarg line="-Djava.awt.headless=true -Xmx768m -XX:MaxPermSize=128m"/>

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>

            <classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

        <junitreport todir="${target.junit.reports.dir}">
            <fileset dir="${target.junit.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${target.junit.summary.dir}"/>
        </junitreport>

    </target>


    <target name="doc.clean" description="Delete temporary and distribution directories for docs">

        <delete dir="${reference.dir}/pdf"/>
        <delete dir="${reference.dir}/html_single"/>
        <delete dir="${reference.dir}/html"/>
        <delete dir="${reference.dir}/lib"/>

    </target>


    <target name="doc.prepare" description="Extra preparation for the documentation">

        <unzip src="${reference.dir}/docbook-reference-libs.zip"
               dest="${reference.dir}/"/>

        <fail message="XSLT supporting lib not installed. Please see docs/reference/readme.txt for instructions.">
            <condition>
                <not>
                    <available file="${reference.dir}/lib"/>
                </not>
            </condition>
        </fail>

    </target>


    <target name="doc.pdf" depends="doc.prepare" description="Compile reference documentation to pdf">

        <mkdir dir="${reference.dir}/pdf/images"/>

        <copy todir="${reference.dir}/pdf/images">
            <fileset dir="${reference.dir}/src/images">
                <include name="*.gif"/>
                <include name="*.svg"/>
                <include name="*.jpg"/>
                <include name="*.png"/>
            </fileset>
        </copy>

        <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${reference.dir}">
            <classpath>
                <fileset dir="${reference.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="-o"/>
            <arg value="${reference.dir}/pdf/docbook_fop.tmp"/>
            <arg value="${reference.dir}/src/compass.xml"/>
            <arg value="${reference.dir}/styles/fopdf.xsl"/>
        </java>

        <java classname="org.apache.fop.apps.Fop" fork="true" maxmemory="256m" dir="${reference.dir}">
            <classpath>
                <fileset dir="${reference.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="${reference.dir}/pdf/docbook_fop.tmp"/>
            <arg value="${reference.dir}/pdf/compass-reference.pdf"/>
        </java>

        <delete file="${reference.dir}/pdf/docbook_fop.tmp"/>

    </target>


    <target name="doc.html" depends="doc.prepare" description="Compile reference documentation to chunked html">

        <mkdir dir="${reference.dir}/html/images"/>

        <copy todir="${reference.dir}/html/images">
            <fileset dir="${reference.dir}/src/images">
                <include name="*.gif"/>
                <include name="*.svg"/>
                <include name="*.jpg"/>
                <include name="*.png"/>
            </fileset>
        </copy>

        <copy todir="${reference.dir}/styles">
            <fileset dir="${reference.dir}/styles">
                <include name="*.css"/>
            </fileset>
        </copy>

        <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${reference.dir}/html/">
            <classpath>
                <fileset dir="${reference.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="${reference.dir}/src/compass.xml"/>
            <arg value="${reference.dir}/styles/html_chunk.xsl"/>
        </java>

    </target>


    <target name="doc.htmlsingle" description="Compile reference documentation to single html">

        <mkdir dir="${reference.dir}/html_single/images"/>

        <copy todir="${reference.dir}/html_single/images">
            <fileset dir="${reference.dir}/src/images">
                <include name="*.gif"/>
                <include name="*.svg"/>
                <include name="*.jpg"/>
                <include name="*.png"/>
            </fileset>
        </copy>

        <copy todir="${reference.dir}/html_single/">
            <fileset dir="${reference.dir}/styles">
                <include name="*.css"/>
            </fileset>
        </copy>

        <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${reference.dir}">
            <classpath>
                <fileset dir="${reference.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="-o"/>
            <arg value="${reference.dir}/html_single/index.html"/>
            <arg value="${reference.dir}/src/compass.xml"/>
            <arg value="${reference.dir}/styles/html.xsl"/>
        </java>

    </target>


    <target name="doc.all" depends="doc.html,doc.htmlsingle,doc.pdf"
            description="Generate and copy reference documentation"/>


    <target name="release" depends="alljars,distfiles" description="Generate release zips">

        <mkdir dir="${target.release.dir}"/>

        <delete file="${target.release.dir}/${release.zip}"/>
        <delete file="${target.release.dir}/${release-with-dependencies.zip}"/>

        <fileset id="main" dir=".">
            <include name="dist/**"/>
            <exclude name="dist/*.zip"/>
            <include name="docs/**"/>
            <exclude name="docs/reference/*"/>
            <exclude name="docs/reference/src/**"/>
            <exclude name="docs/reference/images/**"/>
            <exclude name="docs/reference/styles/*.xsl"/>
            <exclude name="docs/reference/lib/**"/>
            <exclude name="docs/reference/html/**"/>
            <exclude name="docs/reference/pdf/images/**"/>
            <exclude name="docs/javadoc/**"/>
            <exclude name="docs/versions/**"/>
            <exclude name="docs/content/**"/>
            <exclude name="docs/index.html"/>
            <exclude name="docs/meta.xml"/>
            <include name="src/**"/>
            <include name="samples/**"/>
            <include name="*.bat"/>
            <include name="pom.xml.template"/>
            <include name="*.txt"/>
            <include name="*.xml"/>
            <exclude name="osbuild.xml"/>
            <include name="*.properties"/>
            <exclude name="build.properties"/>
            <exclude name="compass.test.properties"/>
            <exclude name="**/*.iml"/>
        </fileset>

        <zip zipfile="${target.release.dir}/${release.zip}">
            <zipfileset refid="main" prefix="${release.path}"/>
        </zip>

        <zip zipfile="${target.release.dir}/${release-with-dependencies.zip}">
            <zipfileset refid="main" prefix="${release.path}"/>
            <zipfileset dir="." prefix="${release.path}">
                <include name="lib/*.txt"/>
                <include name="lib/ant/**"/>
                <include name="lib/antlr/**"/>
                <include name="lib/c3p0/**"/>
                <include name="lib/cglib/**"/>
                <include name="lib/commonj/**"/>
                <include name="lib/dom4j/**"/>
                <include name="lib/grails/**"/>
                <include name="lib/groovy/**"/>
                <include name="lib/eclipselink/**"/>
                <include name="lib/ehcache/**"/>
                <include name="lib/hibernate/**"/>
                <include name="lib/hsqldb/**"/>
                <include name="lib/ibatis/**"/>
                <include name="lib/jarjar/**"/>
                <include name="lib/jboss/**"/>
                <include name="lib/j2ee/**"/>
                <include name="lib/jackson/**"/>
                <include name="lib/jakarta-commons/**"/>
                <include name="lib/jakarta-taglibs/**"/>
                <include name="lib/jaxen/**"/>
                <include name="lib/jdom/**"/>
                <include name="lib/jettison/**"/>
                <include name="lib/joda/**"/>
                <include name="lib/jotm/**"/>
                <include name="lib/jpa/**"/>
                <include name="lib/junit/**"/>
                <include name="lib/jsr223/**"/>
                <include name="lib/log4j/**"/>
                <include name="lib/lucene/**"/>
                <include name="lib/mvel/**"/>
                <include name="lib/openejb/**"/>
                <include name="lib/openjpa/**"/>
                <include name="lib/ognl/**"/>
                <include name="lib/spring/**"/>
                <include name="lib/stax/**"/>
                <include name="lib/sunfsjndi/**"/>
                <include name="lib/toplink/**"/>
                <include name="lib/velocity/**"/>
                <include name="lib/woodstox/**"/>
                <include name="lib/xpp/**"/>
                <include name="lib/gigaspaces/**"/>
                <include name="lib/terracotta/**"/>
                <include name="lib/joda/**"/>
            </zipfileset>
        </zip>

        <delete file="${target.release.dir}/compass-${compass-version}-docs.zip" />
        <zip zipfile="${target.release.dir}/compass-${compass-version}-docs.zip" basedir="${basedir}">
            <include name="docs/**"/>
            <exclude name="docs/reference/*"/>
            <exclude name="docs/reference/src/**"/>
            <exclude name="docs/reference/styles/*.xsl"/>
            <exclude name="docs/reference/lib/**"/>
            <exclude name="docs/reference/pdf/images/**"/>
            <exclude name="docs/javadoc/**"/>
            <exclude name="docs/versions/**"/>
            <exclude name="docs/content/**"/>
            <exclude name="docs/index.html"/>
            <exclude name="docs/meta.xml"/>
        </zip>

    </target>


    <target name="clean_release" depends="clean, release"/>
</project>
